{
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.10",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "nvidiaTeslaT4",
      "dataSources": [
        {
          "sourceId": 7499856,
          "sourceType": "datasetVersion",
          "datasetId": 4367226
        },
        {
          "sourceId": 7591350,
          "sourceType": "datasetVersion",
          "datasetId": 4418977
        }
      ],
      "dockerImageVersionId": 30498,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": true
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "e87afb9d239a43f7b4dec95fd12d4df6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ca66cd5169b0437e87f399dd24dd6c61",
              "IPY_MODEL_1bffb9b733714264aea1924c599a083b",
              "IPY_MODEL_1f6638b1428744c9a41c2a741f640a7a"
            ],
            "layout": "IPY_MODEL_1a80a90e657e4ab589f604f745cf087c"
          }
        },
        "ca66cd5169b0437e87f399dd24dd6c61": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_09fbd266632245f9a6df88ad8d83344f",
            "placeholder": "​",
            "style": "IPY_MODEL_86946274d5414612b255e3a696ef65a1",
            "value": "100%"
          }
        },
        "1bffb9b733714264aea1924c599a083b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9ddfeeeb4ed7464186ce398607a50e7d",
            "max": 10,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c98734a97451479aa2b9885f02b33992",
            "value": 10
          }
        },
        "1f6638b1428744c9a41c2a741f640a7a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_17c9b971fe954fcb9a0899e5cf059e60",
            "placeholder": "​",
            "style": "IPY_MODEL_47770931ce254e3998cab3b901ac04ce",
            "value": " 10/10 [2:23:55&lt;00:00, 491.18s/it]"
          }
        },
        "1a80a90e657e4ab589f604f745cf087c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "09fbd266632245f9a6df88ad8d83344f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "86946274d5414612b255e3a696ef65a1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9ddfeeeb4ed7464186ce398607a50e7d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c98734a97451479aa2b9885f02b33992": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "17c9b971fe954fcb9a0899e5cf059e60": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "47770931ce254e3998cab3b901ac04ce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/klpranaav/facial-recognition-vision-transformer/blob/main/facial-emotion-recognition\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import os\n",
        "import torchvision\n",
        "import torch.nn as nn\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from tqdm.auto import tqdm\n",
        "from typing import Dict, List, Tuple\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from PIL import Image\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:30.372851Z",
          "iopub.execute_input": "2024-02-13T15:19:30.373392Z",
          "iopub.status.idle": "2024-02-13T15:19:35.609933Z",
          "shell.execute_reply.started": "2024-02-13T15:19:30.373365Z",
          "shell.execute_reply": "2024-02-13T15:19:35.608953Z"
        },
        "trusted": true,
        "id": "Z31BzEckGuxx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "device"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:35.611836Z",
          "iopub.execute_input": "2024-02-13T15:19:35.612623Z",
          "iopub.status.idle": "2024-02-13T15:19:35.683467Z",
          "shell.execute_reply.started": "2024-02-13T15:19:35.612589Z",
          "shell.execute_reply": "2024-02-13T15:19:35.682361Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "Q36WKIXaGux3",
        "outputId": "9dfc5fb3-6e22-4593-91b8-c1a8c759a160"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cuda'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hhHKHajtHKor",
        "outputId": "852ede72-137a-4f11-dede-38d54ba0902c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_dir = '/content/gdrive/MyDrive/Colab Notebooks/capstone-dataset/train'\n",
        "test_dir = '/content/gdrive/MyDrive/Colab Notebooks/capstone-dataset/test'"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:35.685095Z",
          "iopub.execute_input": "2024-02-13T15:19:35.685838Z",
          "iopub.status.idle": "2024-02-13T15:19:35.700708Z",
          "shell.execute_reply.started": "2024-02-13T15:19:35.685804Z",
          "shell.execute_reply": "2024-02-13T15:19:35.699735Z"
        },
        "trusted": true,
        "id": "GqvauvE_Gux4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Create Datasets and Dataloaders**"
      ],
      "metadata": {
        "id": "b0Pwv_-qGux5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NUM_WORKERS = os.cpu_count()\n",
        "\n",
        "def create_dataloaders(\n",
        "    train_dir: str,\n",
        "    test_dir: str,\n",
        "    transform: transforms.Compose,\n",
        "    batch_size: int,\n",
        "    num_workers: int=NUM_WORKERS\n",
        "):\n",
        "\n",
        "  # Use ImageFolder to create dataset(s)\n",
        "  train_data = datasets.ImageFolder(train_dir, transform=transform)\n",
        "  test_data = datasets.ImageFolder(test_dir, transform=transform)\n",
        "\n",
        "  # Get class names\n",
        "  class_names = train_data.classes\n",
        "\n",
        "  # Turn images into data loaders\n",
        "  train_dataloader = DataLoader(\n",
        "      train_data,\n",
        "      batch_size=batch_size,\n",
        "      shuffle=True,\n",
        "      num_workers=num_workers,\n",
        "      pin_memory=True,\n",
        "  )\n",
        "  test_dataloader = DataLoader(\n",
        "      test_data,\n",
        "      batch_size=batch_size,\n",
        "      shuffle=False,\n",
        "      num_workers=num_workers,\n",
        "      pin_memory=True,\n",
        "  )\n",
        "\n",
        "  return train_dataloader, test_dataloader, class_names"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:35.703263Z",
          "iopub.execute_input": "2024-02-13T15:19:35.704295Z",
          "iopub.status.idle": "2024-02-13T15:19:35.712807Z",
          "shell.execute_reply.started": "2024-02-13T15:19:35.704261Z",
          "shell.execute_reply": "2024-02-13T15:19:35.711926Z"
        },
        "trusted": true,
        "id": "0Wd2B4qNGux6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create image size\n",
        "IMG_SIZE = 224\n",
        "\n",
        "# Create transform pipeline manually\n",
        "manual_transforms = transforms.Compose([\n",
        "    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "print(f\"Manually created transforms: {manual_transforms}\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:35.714087Z",
          "iopub.execute_input": "2024-02-13T15:19:35.714396Z",
          "iopub.status.idle": "2024-02-13T15:19:35.725103Z",
          "shell.execute_reply.started": "2024-02-13T15:19:35.714369Z",
          "shell.execute_reply": "2024-02-13T15:19:35.723984Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wy51wHOXGux7",
        "outputId": "f9df0da5-57f6-44cd-d924-c61e6cdd8e95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Manually created transforms: Compose(\n",
            "    Resize(size=(224, 224), interpolation=bilinear, max_size=None, antialias=warn)\n",
            "    ToTensor()\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the batch size\n",
        "BATCH_SIZE = 32\n",
        "\n",
        "# Create data loaders\n",
        "train_dataloader, test_dataloader, class_names = create_dataloaders(\n",
        "    train_dir = train_dir,\n",
        "    test_dir = test_dir,\n",
        "    transform=manual_transforms,\n",
        "    batch_size=BATCH_SIZE\n",
        ")\n",
        "\n",
        "train_dataloader, test_dataloader, class_names"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:19:35.728416Z",
          "iopub.execute_input": "2024-02-13T15:19:35.728704Z",
          "iopub.status.idle": "2024-02-13T15:20:11.541379Z",
          "shell.execute_reply.started": "2024-02-13T15:19:35.728670Z",
          "shell.execute_reply": "2024-02-13T15:20:11.540484Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NeV8e1NlGux8",
        "outputId": "94770d04-a7ea-4498-8776-d5126a51cb9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<torch.utils.data.dataloader.DataLoader at 0x7914758cf7f0>,\n",
              " <torch.utils.data.dataloader.DataLoader at 0x7914758ce500>,\n",
              " ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise'])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "image_batch, label_batch = next(iter(train_dataloader))\n",
        "\n",
        "image, label = image_batch[0], label_batch[0]\n",
        "\n",
        "print(image.shape, label)\n",
        "\n",
        "plt.imshow(image.permute(1, 2, 0))\n",
        "plt.title(class_names[label])\n",
        "plt.axis(False);"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:11.542394Z",
          "iopub.execute_input": "2024-02-13T15:20:11.542648Z",
          "iopub.status.idle": "2024-02-13T15:20:12.539123Z",
          "shell.execute_reply.started": "2024-02-13T15:20:11.542626Z",
          "shell.execute_reply": "2024-02-13T15:20:12.538141Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "Aj3vzUgCGux8",
        "outputId": "32f30be9-c760-457c-d9e9-f9d24b3233b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([3, 224, 224]) tensor(2)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Create PatchEmbedding Layer**"
      ],
      "metadata": {
        "id": "M-2NZGuPGux9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class PatchEmbedding(nn.Module):\n",
        "    def __init__(self,\n",
        "                 in_channels:int=3,\n",
        "                 patch_size:int=16,\n",
        "                 embedding_dim:int=768):\n",
        "        super().__init__()\n",
        "\n",
        "        self.patcher = nn.Conv2d(in_channels=in_channels,\n",
        "                                 out_channels=embedding_dim,\n",
        "                                 kernel_size=patch_size,\n",
        "                                 stride=patch_size,\n",
        "                                 padding=0)\n",
        "\n",
        "        self.flatten = nn.Flatten(start_dim=2,end_dim=3)\n",
        "\n",
        "    def forward(self, x):\n",
        "        image_resolution = x.shape[-1]\n",
        "        assert image_resolution % patch_size == 0, f\"Input image size must be divisble by patch size, image shape: {image_resolution}, patch size: {patch_size}\"\n",
        "\n",
        "        x_patched = self.patcher(x)\n",
        "        x_flattened = self.flatten(x_patched)\n",
        "\n",
        "        return x_flattened.permute(0, 2, 1)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.540660Z",
          "iopub.execute_input": "2024-02-13T15:20:12.541371Z",
          "iopub.status.idle": "2024-02-13T15:20:12.548687Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.541337Z",
          "shell.execute_reply": "2024-02-13T15:20:12.547743Z"
        },
        "trusted": true,
        "id": "wZEciwOHGux9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's test it on single image\n",
        "patch_size =16\n",
        "\n",
        "# Set seeds\n",
        "def set_seeds(seed: int=42):\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed(seed)\n",
        "\n",
        "set_seeds()\n",
        "\n",
        "patchify = PatchEmbedding(in_channels=3,patch_size=16,embedding_dim=768)\n",
        "\n",
        "print(f\"Input image shape: {image.unsqueeze(0).shape}\")\n",
        "patch_embedded_image = patchify(image.unsqueeze(0))\n",
        "print(f\"Output patch embedding shape: {patch_embedded_image.shape}\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.550101Z",
          "iopub.execute_input": "2024-02-13T15:20:12.550449Z",
          "iopub.status.idle": "2024-02-13T15:20:12.626927Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.550417Z",
          "shell.execute_reply": "2024-02-13T15:20:12.626071Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qFgPIv9qGux-",
        "outputId": "9122caf4-484d-4a39-fbba-e3f7e3c88db0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input image shape: torch.Size([1, 3, 224, 224])\n",
            "Output patch embedding shape: torch.Size([1, 196, 768])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(patch_embedded_image)\n",
        "print(f\"Patch embedding shape: {patch_embedded_image.shape} -> [batch_size, number_of_patches, embedding_dimension]\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.631297Z",
          "iopub.execute_input": "2024-02-13T15:20:12.631571Z",
          "iopub.status.idle": "2024-02-13T15:20:12.668493Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.631547Z",
          "shell.execute_reply": "2024-02-13T15:20:12.667651Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dmlHJq70Gux-",
        "outputId": "8c62e8ba-177b-4fe9-f050-ed958f7fe1a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[[-1.0354,  0.2810, -0.2846,  ...,  0.7861, -0.4675,  0.3637],\n",
            "         [-0.9616,  0.2327, -0.3013,  ...,  0.7412, -0.4374,  0.4004],\n",
            "         [-0.8514,  0.1761, -0.3048,  ...,  0.6905, -0.3819,  0.3755],\n",
            "         ...,\n",
            "         [-0.4981,  0.1149, -0.1539,  ...,  0.4077, -0.2786,  0.1901],\n",
            "         [-0.5364,  0.1334, -0.1483,  ...,  0.4029, -0.2398,  0.1864],\n",
            "         [-0.4984,  0.1323, -0.1472,  ...,  0.3772, -0.2337,  0.1820]]],\n",
            "       grad_fn=<PermuteBackward0>)\n",
            "Patch embedding shape: torch.Size([1, 196, 768]) -> [batch_size, number_of_patches, embedding_dimension]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set_seeds()\n",
        "\n",
        "patch_size = 16\n",
        "\n",
        "print(f\"Image tensor shape: {image.shape}\")\n",
        "height, width = image.shape[1], image.shape[2]\n",
        "\n",
        "x = image.unsqueeze(0)\n",
        "print(f\"Input image with batch dimension shape: {x.shape}\")\n",
        "\n",
        "patch_embedding_layer = PatchEmbedding(in_channels=3,patch_size=patch_size,embedding_dim=768)\n",
        "\n",
        "patch_embedding = patch_embedding_layer(x)\n",
        "print(f\"Patching embedding shape: {patch_embedding.shape}\")\n",
        "\n",
        "batch_size = patch_embedding.shape[0]\n",
        "embedding_dimension = patch_embedding.shape[-1]\n",
        "class_token = nn.Parameter(torch.ones(batch_size, 1, embedding_dimension),\n",
        "                           requires_grad=True) # make sure it's learnable\n",
        "print(f\"Class token embedding shape: {class_token.shape}\")\n",
        "\n",
        "patch_embedding_class_token = torch.cat((class_token, patch_embedding), dim=1)\n",
        "print(f\"Patch embedding with class token shape: {patch_embedding_class_token.shape}\")\n",
        "\n",
        "number_of_patches = int((height * width) / patch_size**2)\n",
        "position_embedding = nn.Parameter(torch.ones(1, number_of_patches+1, embedding_dimension),\n",
        "                                  requires_grad=True)\n",
        "\n",
        "\n",
        "patch_and_position_embedding = patch_embedding_class_token + position_embedding\n",
        "print(f\"Patch and position embedding shape: {patch_and_position_embedding.shape}\")\n",
        "\n",
        "print(patch_embedding_class_token)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.669585Z",
          "iopub.execute_input": "2024-02-13T15:20:12.669928Z",
          "iopub.status.idle": "2024-02-13T15:20:12.696240Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.669894Z",
          "shell.execute_reply": "2024-02-13T15:20:12.695400Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pDUWZlFHGux_",
        "outputId": "5a5e4d5b-e5d2-4296-c5b8-e7903c3e00a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Image tensor shape: torch.Size([3, 224, 224])\n",
            "Input image with batch dimension shape: torch.Size([1, 3, 224, 224])\n",
            "Patching embedding shape: torch.Size([1, 196, 768])\n",
            "Class token embedding shape: torch.Size([1, 1, 768])\n",
            "Patch embedding with class token shape: torch.Size([1, 197, 768])\n",
            "Patch and position embedding shape: torch.Size([1, 197, 768])\n",
            "tensor([[[ 1.0000,  1.0000,  1.0000,  ...,  1.0000,  1.0000,  1.0000],\n",
            "         [-1.0354,  0.2810, -0.2846,  ...,  0.7861, -0.4675,  0.3637],\n",
            "         [-0.9616,  0.2327, -0.3013,  ...,  0.7412, -0.4374,  0.4004],\n",
            "         ...,\n",
            "         [-0.4981,  0.1149, -0.1539,  ...,  0.4077, -0.2786,  0.1901],\n",
            "         [-0.5364,  0.1334, -0.1483,  ...,  0.4029, -0.2398,  0.1864],\n",
            "         [-0.4984,  0.1323, -0.1472,  ...,  0.3772, -0.2337,  0.1820]]],\n",
            "       grad_fn=<CatBackward0>)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Create Transformer Encoder Layers**\n",
        "## 1. **Multi Head Self Attention Block**\n",
        "## 2. **Feed Forward Network**\n",
        "## 3. **Layer Normalization**"
      ],
      "metadata": {
        "id": "fw2kkgYAGuyA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MultiheadSelfAttentionBlock(nn.Module):\n",
        "\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768,\n",
        "                 num_heads:int=12,\n",
        "                 attn_dropout:float=0):\n",
        "        super().__init__()\n",
        "\n",
        "        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n",
        "\n",
        "        self.multihead_attn = nn.MultiheadAttention(embed_dim=embedding_dim,\n",
        "                                                    num_heads=num_heads,\n",
        "                                                    dropout=attn_dropout,\n",
        "                                                    batch_first=True)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.layer_norm(x)\n",
        "        attn_output, _ = self.multihead_attn(query=x,key=x,value=x,need_weights=False)\n",
        "        return attn_output"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.697180Z",
          "iopub.execute_input": "2024-02-13T15:20:12.697412Z",
          "iopub.status.idle": "2024-02-13T15:20:12.703741Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.697392Z",
          "shell.execute_reply": "2024-02-13T15:20:12.702787Z"
        },
        "trusted": true,
        "id": "hNfNxaNBGuyA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **MultiLayer Perceptron Block (MLP)**"
      ],
      "metadata": {
        "id": "6EPqpnBFGuyA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MLPBlock(nn.Module):\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768,\n",
        "                 mlp_size:int=3072,\n",
        "                 dropout:float=0.1):\n",
        "        super().__init__()\n",
        "\n",
        "        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n",
        "\n",
        "        self.mlp = nn.Sequential(\n",
        "            nn.Linear(in_features=embedding_dim, out_features=mlp_size),\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(p=dropout),\n",
        "            nn.Linear(in_features=mlp_size, out_features=embedding_dim),\n",
        "            nn.Dropout(p=dropout)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.layer_norm(x)\n",
        "        x = self.mlp(x)\n",
        "        return x"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.704897Z",
          "iopub.execute_input": "2024-02-13T15:20:12.705250Z",
          "iopub.status.idle": "2024-02-13T15:20:12.713619Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.705227Z",
          "shell.execute_reply": "2024-02-13T15:20:12.712836Z"
        },
        "trusted": true,
        "id": "_y2VycUGGuyB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Create Transformer Encoder Block**"
      ],
      "metadata": {
        "id": "P4pkZCbEGuyB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class TransformerEncoderBlock(nn.Module):\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768,\n",
        "                 num_heads:int=12,\n",
        "                 mlp_size:int=3072,\n",
        "                 mlp_dropout:float=0.1,\n",
        "                 attn_dropout:float=0):\n",
        "        super().__init__()\n",
        "\n",
        "        self.msa_block = MultiheadSelfAttentionBlock(embedding_dim=embedding_dim,\n",
        "                                                     num_heads=num_heads,\n",
        "                                                     attn_dropout=attn_dropout)\n",
        "\n",
        "        self.mlp_block =  MLPBlock(embedding_dim=embedding_dim,\n",
        "                                   mlp_size=mlp_size,\n",
        "                                   dropout=mlp_dropout)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x =  self.msa_block(x) + x\n",
        "        x = self.mlp_block(x) + x\n",
        "        return x"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.714700Z",
          "iopub.execute_input": "2024-02-13T15:20:12.715010Z",
          "iopub.status.idle": "2024-02-13T15:20:12.728280Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.714980Z",
          "shell.execute_reply": "2024-02-13T15:20:12.727319Z"
        },
        "trusted": true,
        "id": "epVCpBHyGuyB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torchinfo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MiivnhuMIOuu",
        "outputId": "a063b643-765f-4b96-bab9-c33707d9ba97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting torchinfo\n",
            "  Downloading torchinfo-1.8.0-py3-none-any.whl (23 kB)\n",
            "Installing collected packages: torchinfo\n",
            "Successfully installed torchinfo-1.8.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "transformer_encoder_block = TransformerEncoderBlock()\n",
        "\n",
        "from torchinfo import summary\n",
        "# Print an input and output summary of our Transformer Encoder\n",
        "summary(model=transformer_encoder_block,\n",
        "        input_size=(1, 197, 768), # (batch_size, num_patches, embedding_dimension)\n",
        "        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n",
        "        col_width=20,\n",
        "       row_settings=[\"var_names\"])"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:12.729626Z",
          "iopub.execute_input": "2024-02-13T15:20:12.729997Z",
          "iopub.status.idle": "2024-02-13T15:20:13.025918Z",
          "shell.execute_reply.started": "2024-02-13T15:20:12.729948Z",
          "shell.execute_reply": "2024-02-13T15:20:13.024896Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TgzqRwnoGuyB",
        "outputId": "404f86b7-5b9b-4d62-f8bd-97f44907a45a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "==================================================================================================================================\n",
              "Layer (type (var_name))                            Input Shape          Output Shape         Param #              Trainable\n",
              "==================================================================================================================================\n",
              "TransformerEncoderBlock (TransformerEncoderBlock)  [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "├─MultiheadSelfAttentionBlock (msa_block)          [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    └─LayerNorm (layer_norm)                      [1, 197, 768]        [1, 197, 768]        1,536                True\n",
              "│    └─MultiheadAttention (multihead_attn)         --                   [1, 197, 768]        2,362,368            True\n",
              "├─MLPBlock (mlp_block)                             [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    └─LayerNorm (layer_norm)                      [1, 197, 768]        [1, 197, 768]        1,536                True\n",
              "│    └─Sequential (mlp)                            [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    │    └─Linear (0)                             [1, 197, 768]        [1, 197, 3072]       2,362,368            True\n",
              "│    │    └─GELU (1)                               [1, 197, 3072]       [1, 197, 3072]       --                   --\n",
              "│    │    └─Dropout (2)                            [1, 197, 3072]       [1, 197, 3072]       --                   --\n",
              "│    │    └─Linear (3)                             [1, 197, 3072]       [1, 197, 768]        2,360,064            True\n",
              "│    │    └─Dropout (4)                            [1, 197, 768]        [1, 197, 768]        --                   --\n",
              "==================================================================================================================================\n",
              "Total params: 7,087,872\n",
              "Trainable params: 7,087,872\n",
              "Non-trainable params: 0\n",
              "Total mult-adds (M): 4.73\n",
              "==================================================================================================================================\n",
              "Input size (MB): 0.61\n",
              "Forward/backward pass size (MB): 8.47\n",
              "Params size (MB): 18.90\n",
              "Estimated Total Size (MB): 27.98\n",
              "=================================================================================================================================="
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Build Vision Transformer**"
      ],
      "metadata": {
        "id": "_TfcIR7mGuyC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ViT(nn.Module):\n",
        "    def __init__(self,\n",
        "                 img_size:int=224,\n",
        "                 in_channels:int=3,\n",
        "                 patch_size:int=16,\n",
        "                 num_transformer_layers:int=12,\n",
        "                 embedding_dim:int=768,\n",
        "                 mlp_size:int=3072,\n",
        "                 num_heads:int=12,\n",
        "                 attn_dropout:float=0,\n",
        "                 mlp_dropout:float=0.1,\n",
        "                 embedding_dropout:float=0.1,\n",
        "                 num_classes:int=7):\n",
        "        super().__init__()\n",
        "\n",
        "        assert img_size % patch_size == 0, f\"Image size must be divisible by patch size, image size: {img_size}, patch size: {patch_size}.\"\n",
        "\n",
        "        self.num_patches = (img_size * img_size) // patch_size**2\n",
        "\n",
        "        self.class_embedding = nn.Parameter(data=torch.randn(1, 1, embedding_dim),\n",
        "                                            requires_grad=True)\n",
        "\n",
        "        self.position_embedding = nn.Parameter(data=torch.randn(1, self.num_patches+1, embedding_dim),\n",
        "                                               requires_grad=True)\n",
        "\n",
        "        self.embedding_dropout = nn.Dropout(p=embedding_dropout)\n",
        "\n",
        "        self.patch_embedding = PatchEmbedding(in_channels=in_channels,\n",
        "                                              patch_size=patch_size,\n",
        "                                              embedding_dim=embedding_dim)\n",
        "\n",
        "        self.transformer_encoder = nn.Sequential(*[TransformerEncoderBlock(embedding_dim=embedding_dim,\n",
        "                                                                            num_heads=num_heads,\n",
        "                                                                            mlp_size=mlp_size,\n",
        "                                                                            mlp_dropout=mlp_dropout) for _ in range(num_transformer_layers)])\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.LayerNorm(normalized_shape=embedding_dim),\n",
        "            nn.Linear(in_features=embedding_dim,\n",
        "                      out_features=num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        batch_size = x.shape[0]\n",
        "        class_token = self.class_embedding.expand(batch_size, -1, -1)\n",
        "        x = self.patch_embedding(x)\n",
        "        x = torch.cat((class_token, x), dim=1)\n",
        "        x = self.position_embedding + x\n",
        "        x = self.embedding_dropout(x)\n",
        "        x = self.transformer_encoder(x)\n",
        "        x = self.classifier(x[:, 0])\n",
        "        return x"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:13.027518Z",
          "iopub.execute_input": "2024-02-13T15:20:13.028410Z",
          "iopub.status.idle": "2024-02-13T15:20:13.041776Z",
          "shell.execute_reply.started": "2024-02-13T15:20:13.028365Z",
          "shell.execute_reply": "2024-02-13T15:20:13.040648Z"
        },
        "trusted": true,
        "id": "bAYaW-arGuyC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Train Model**"
      ],
      "metadata": {
        "id": "A5oouzY3GuyD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vit = ViT(num_classes=len(class_names))\n",
        "vit_weights = torchvision.models.ViT_B_16_Weights.DEFAULT\n",
        "train_vit = torchvision.models.vit_b_16(weights=vit_weights).to(device)\n",
        "for parameter in train_vit.parameters():\n",
        "    parameter.requires_grad = False\n",
        "class_names = ['anger','sad', 'happy', 'neutral', 'Disgust','fear','surprised', 'contempt']\n",
        "\n",
        "set_seeds()\n",
        "train_vit.heads = nn.Linear(in_features=768, out_features=len(class_names)).to(device)\n",
        "vit_transforms = vit_weights.transforms()\n",
        "print(vit_transforms)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:13.043059Z",
          "iopub.execute_input": "2024-02-13T15:20:13.043349Z",
          "iopub.status.idle": "2024-02-13T15:20:16.740963Z",
          "shell.execute_reply.started": "2024-02-13T15:20:13.043327Z",
          "shell.execute_reply": "2024-02-13T15:20:16.739854Z"
        },
        "trusted": true,
        "id": "Dihi2lYFGuyD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train_step(model: torch.nn.Module,\n",
        "               dataloader: torch.utils.data.DataLoader,\n",
        "               loss_fn: torch.nn.Module,\n",
        "               optimizer: torch.optim.Optimizer,\n",
        "               device: torch.device) -> Tuple[float, float]:\n",
        "\n",
        "    model.train()\n",
        "\n",
        "    # Setup train loss and train accuracy values\n",
        "    train_loss, train_acc = 0, 0\n",
        "\n",
        "    # Loop through data loader data batches\n",
        "    for batch, (X, y) in enumerate(dataloader):\n",
        "        X, y = X.to(device), y.to(device)\n",
        "        y_pred = model(X)\n",
        "\n",
        "        loss = loss_fn(y_pred, y)\n",
        "        train_loss += loss.item()\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "\n",
        "        optimizer.step()\n",
        "\n",
        "        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n",
        "        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n",
        "\n",
        "    train_loss = train_loss / len(dataloader)\n",
        "    train_acc = train_acc / len(dataloader)\n",
        "    return train_loss, train_acc"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:16.742298Z",
          "iopub.execute_input": "2024-02-13T15:20:16.742625Z",
          "iopub.status.idle": "2024-02-13T15:20:16.751544Z",
          "shell.execute_reply.started": "2024-02-13T15:20:16.742598Z",
          "shell.execute_reply": "2024-02-13T15:20:16.750502Z"
        },
        "trusted": true,
        "id": "xOIiy9p4GuyE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_step(model: torch.nn.Module,\n",
        "              dataloader: torch.utils.data.DataLoader,\n",
        "              loss_fn: torch.nn.Module,\n",
        "              device: torch.device) -> Tuple[float, float]:\n",
        "\n",
        "    model.eval()\n",
        "\n",
        "    test_loss, test_acc = 0, 0\n",
        "\n",
        "    with torch.inference_mode():\n",
        "        for batch, (X, y) in enumerate(dataloader):\n",
        "            X, y = X.to(device), y.to(device)\n",
        "\n",
        "            test_pred_logits = model(X)\n",
        "            loss = loss_fn(test_pred_logits, y)\n",
        "            test_loss += loss.item()\n",
        "\n",
        "            test_pred_labels = test_pred_logits.argmax(dim=1)\n",
        "            test_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n",
        "\n",
        "    test_loss = test_loss / len(dataloader)\n",
        "    test_acc = test_acc / len(dataloader)\n",
        "    return test_loss, test_acc"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:16.752782Z",
          "iopub.execute_input": "2024-02-13T15:20:16.753131Z",
          "iopub.status.idle": "2024-02-13T15:20:16.763990Z",
          "shell.execute_reply.started": "2024-02-13T15:20:16.753101Z",
          "shell.execute_reply": "2024-02-13T15:20:16.762951Z"
        },
        "trusted": true,
        "id": "G64msP81GuyE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train(model: torch.nn.Module,\n",
        "          train_dataloader: torch.utils.data.DataLoader,\n",
        "          test_dataloader: torch.utils.data.DataLoader,\n",
        "          optimizer: torch.optim.Optimizer,\n",
        "          loss_fn: torch.nn.Module,\n",
        "          epochs: int,\n",
        "          device: torch.device) -> Dict[str, List]:\n",
        "\n",
        "    # Create empty results dictionary\n",
        "    results = {\"train_loss\": [],\n",
        "               \"train_acc\": [],\n",
        "               \"test_loss\": [],\n",
        "               \"test_acc\": []\n",
        "    }\n",
        "\n",
        "    model.to(device)\n",
        "\n",
        "    # Loop through training and testing steps for a number of epochs\n",
        "    for epoch in tqdm(range(epochs)):\n",
        "        train_loss, train_acc = train_step(model=model,\n",
        "                                          dataloader=train_dataloader,\n",
        "                                          loss_fn=loss_fn,\n",
        "                                          optimizer=optimizer,\n",
        "                                          device=device)\n",
        "        test_loss, test_acc = test_step(model=model,\n",
        "          dataloader=test_dataloader,\n",
        "          loss_fn=loss_fn,\n",
        "          device=device)\n",
        "\n",
        "        print(\n",
        "          f\"Epoch: {epoch+1} | \"\n",
        "          f\"train_loss: {train_loss:.4f} | \"\n",
        "          f\"train_acc: {train_acc:.4f} | \"\n",
        "          f\"test_loss: {test_loss:.4f} | \"\n",
        "          f\"test_acc: {test_acc:.4f}\"\n",
        "        )\n",
        "\n",
        "        results[\"train_loss\"].append(train_loss)\n",
        "        results[\"train_acc\"].append(train_acc)\n",
        "        results[\"test_loss\"].append(test_loss)\n",
        "        results[\"test_acc\"].append(test_acc)\n",
        "\n",
        "    return results"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:16.764988Z",
          "iopub.execute_input": "2024-02-13T15:20:16.765268Z",
          "iopub.status.idle": "2024-02-13T15:20:16.780627Z",
          "shell.execute_reply.started": "2024-02-13T15:20:16.765245Z",
          "shell.execute_reply": "2024-02-13T15:20:16.779763Z"
        },
        "trusted": true,
        "id": "ZSczvKWAGuyE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def set_seeds(seed: int=42):\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed(seed)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:16.781689Z",
          "iopub.execute_input": "2024-02-13T15:20:16.781981Z",
          "iopub.status.idle": "2024-02-13T15:20:16.794343Z",
          "shell.execute_reply.started": "2024-02-13T15:20:16.781936Z",
          "shell.execute_reply": "2024-02-13T15:20:16.793358Z"
        },
        "trusted": true,
        "id": "j_8swaUJGuyF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = torch.optim.Adam(params=train_vit.parameters(),\n",
        "                             lr=5e-4)\n",
        "loss_fn = torch.nn.CrossEntropyLoss()\n",
        "\n",
        "set_seeds()\n",
        "vit_results = train(model=train_vit,\n",
        "                    train_dataloader=train_dataloader,\n",
        "                    test_dataloader=test_dataloader,\n",
        "                    optimizer=optimizer,\n",
        "                    loss_fn=loss_fn,\n",
        "                    epochs=10,\n",
        "                    device=device)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-02-13T15:20:16.795518Z",
          "iopub.execute_input": "2024-02-13T15:20:16.795777Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223,
          "referenced_widgets": [
            "e87afb9d239a43f7b4dec95fd12d4df6",
            "ca66cd5169b0437e87f399dd24dd6c61",
            "1bffb9b733714264aea1924c599a083b",
            "1f6638b1428744c9a41c2a741f640a7a",
            "1a80a90e657e4ab589f604f745cf087c",
            "09fbd266632245f9a6df88ad8d83344f",
            "86946274d5414612b255e3a696ef65a1",
            "9ddfeeeb4ed7464186ce398607a50e7d",
            "c98734a97451479aa2b9885f02b33992",
            "17c9b971fe954fcb9a0899e5cf059e60",
            "47770931ce254e3998cab3b901ac04ce"
          ]
        },
        "id": "83MgC3YNGuyF",
        "outputId": "1325a0ad-19be-4a22-e0d0-430fe846336a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/10 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "e87afb9d239a43f7b4dec95fd12d4df6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 1.4888 | train_acc: 0.4343 | test_loss: 1.3758 | test_acc: 0.4831\n",
            "Epoch: 2 | train_loss: 1.3500 | train_acc: 0.4915 | test_loss: 1.3157 | test_acc: 0.5097\n",
            "Epoch: 3 | train_loss: 1.3023 | train_acc: 0.5086 | test_loss: 1.2870 | test_acc: 0.5251\n",
            "Epoch: 4 | train_loss: 1.2738 | train_acc: 0.5185 | test_loss: 1.2691 | test_acc: 0.5264\n",
            "Epoch: 5 | train_loss: 1.2535 | train_acc: 0.5285 | test_loss: 1.2620 | test_acc: 0.5283\n",
            "Epoch: 6 | train_loss: 1.2384 | train_acc: 0.5352 | test_loss: 1.2493 | test_acc: 0.5351\n",
            "Epoch: 7 | train_loss: 1.2261 | train_acc: 0.5382 | test_loss: 1.2450 | test_acc: 0.5312\n",
            "Epoch: 8 | train_loss: 1.2176 | train_acc: 0.5430 | test_loss: 1.2395 | test_acc: 0.5407\n",
            "Epoch: 9 | train_loss: 1.2080 | train_acc: 0.5451 | test_loss: 1.2369 | test_acc: 0.5377\n",
            "Epoch: 10 | train_loss: 1.2021 | train_acc: 0.5472 | test_loss: 1.2292 | test_acc: 0.5402\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.save(train_vit.state_dict(), 'vit.pth')"
      ],
      "metadata": {
        "trusted": true,
        "id": "izRdYtOBGuyF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_loss_curves(results):\n",
        "\n",
        "    loss = results[\"train_loss\"]\n",
        "    test_loss = results[\"test_loss\"]\n",
        "\n",
        "    accuracy = results[\"train_acc\"]\n",
        "    test_accuracy = results[\"test_acc\"]\n",
        "\n",
        "    epochs = range(len(results[\"train_loss\"]))\n",
        "\n",
        "    plt.figure(figsize=(15, 7))\n",
        "\n",
        "    # Plot loss\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(epochs, loss, label=\"train_loss\")\n",
        "    plt.plot(epochs, test_loss, label=\"test_loss\")\n",
        "    plt.title(\"Loss\")\n",
        "    plt.xlabel(\"Epochs\")\n",
        "    plt.legend()\n",
        "\n",
        "    # Plot accuracy\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(epochs, accuracy, label=\"train_accuracy\")\n",
        "    plt.plot(epochs, test_accuracy, label=\"test_accuracy\")\n",
        "    plt.title(\"Accuracy\")\n",
        "    plt.xlabel(\"Epochs\")\n",
        "    plt.legend()\n",
        "\n",
        "plot_loss_curves(vit_results)"
      ],
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "zdZtlfZgGuyG",
        "outputId": "a2722357-96e9-461e-a235-5f801bd8c39e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 2 Axes>"
            ],
            "image/png": "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dcqTjRw7NjLtr7y9vbFarcdte/755/P1119z//33s2DBAhYvXuxq3O9wOKqca+zYsfz000/s3buXXbt28dtvv2m0mEgdpeb7IlKnhYeH4+fnx7Zt2457bOvWrVitVqKiolz3hYaGct1113HdddeRn5/P4MGDmTp1KjfccINrm9atW3P33Xdz9913s2PHDuLj43n++ef54IMPauU5iYiIiLirOXPm0KRJE6ZPn37cY59//jnz589nxowZtG7dmt9///2Ux2rdujUrV66krKwMT0/PE24TEhICOK9w+WcpKSmVzrxx40a2b9/Oe++9x9ixY133//nK5ICrLcff5Qa46qqrmDRpEh999BFFRUV4enoyevToSmcSEfehEWMiUqfZbDYuuOACvvjiC/bs2eO6PyMjgw8//JCBAwcSGBgIwOHDhyvs26hRI9q0aUNJSQkAhYWFFBcXV9imdevWBAQEuLYRERERaaiKior4/PPPufjii7niiiuOWyZOnEheXh4LFy7k8ssvZ/369cyfP/+44xiGATivBn7o0CFeffXVk24TExODzWbj559/rvD4a6+9VuncNputwjGPrb/00ksVtgsPD2fw4MHMnDmT1NTUE+Y5pnHjxgwbNowPPviAOXPmcOGFF9K4ceNKZxIR96ERYyJSZ8ycOZPvvvvuuPunTp3K4sWLGThwILfccgseHh688cYblJSU8Mwzz7i269SpE2effTY9evQgNDSUNWvW8OmnnzJx4kQAtm/fznnnnceoUaPo1KkTHh4ezJ8/n4yMDK666qpae54iIiIi7mjhwoXk5eVxySWXnPDxvn37Eh4ezpw5c/jwww/59NNPufLKK7n++uvp0aMHR44cYeHChcyYMYO4uDjGjh3L7NmzmTRpEqtWrWLQoEEUFBTw/fffc8stt3DppZcSFBTElVdeySuvvILFYqF169Z89dVXHDx4sNK5O3ToQOvWrbnnnnvYt28fgYGBfPbZZye82NLLL7/MwIEDSUhI4MYbb6Rly5bs2bOHr7/+mqSkpArbjh07liuuuAKAxx9/vPLfSBFxL2ZeElNEpDLeffddAzjpkpaWZiQmJhpDhw41GjVqZPj5+RnnnHOOsXz58grHeeKJJ4zevXsbwcHBhq+vr9GhQwfjySefNEpLSw3DMIxDhw4Zt956q9GhQwfD39/fCAoKMvr06WN8/PHHZjxtEREREbcyfPhww8fHxygoKDjpNuPHjzc8PT2NQ4cOGYcPHzYmTpxoNG/e3PDy8jJatGhhjBs3zjh06JBr+8LCQuPBBx80WrZsaXh6ehpNmzY1rrjiCmPXrl2ubTIzM43LL7/c8PPzM0JCQox///vfxu+//24Axrvvvuvabty4cYa/v/8Jc23evNkYMmSI0ahRI6Nx48bGhAkTjPXr1x93DMMwjN9//90YMWKEERwcbPj4+Bjt27c3Hn744eOOWVJSYoSEhBhBQUFGUVFRJb+LIuJuLIbxlzGhIiIiIiIiInJK5eXlNGvWjOHDh/POO++YHUdETpN6jImIiIiIiIhU0YIFC8jMzKzQ0F9E6h6NGBMRERERERGppJUrV7JhwwYef/xxGjduTGJiotmRROQMaMSYiIiIiIiISCW9/vrr3HzzzTRp0oTZs2ebHUdEzpBGjImIiIiIiIiISIOkEWMiIiIiIiIiItIgqTAmIiIiIiIiIiINkofZAaqDw+Fg//79BAQEYLFYzI4jIiIidYRhGOTl5dGsWTOsVv1/obvSez0RERGpqsq+z6sXhbH9+/cTFRVldgwRERGpo9LS0mjRooXZMeQk9F5PRERETtffvc+rcmHs559/5tlnn2Xt2rUcOHCA+fPnc9lll510+6VLl3LOOeccd/+BAwdo2rSp6/b06dN59tlnSU9PJy4ujldeeYXevXtXKlNAQADgfLKBgYFVe0IiIiLSYOXm5hIVFeV6LyHuSe/1REREpKoq+z6vyoWxgoIC4uLiuP766xk5cmSl99u2bVuFNzJNmjRxrc+bN49JkyYxY8YM+vTpw7Rp0xg6dCjbtm2rsN3JHBtSHxgYqDdLIiIiUmWanufe9F5PRERETtffvc+rcmFs2LBhDBs2rMpBmjRpQnBw8Akfe+GFF5gwYQLXXXcdADNmzODrr79m5syZPPDAA1U+l4iIiIiIiIiIyN+ptS6z8fHxREZGcv7557Ns2TLX/aWlpaxdu5YhQ4b8EcpqZciQIaxYseKExyopKSE3N7fCIiIiIiIiIiIiUhU1XhiLjIxkxowZfPbZZ3z22WdERUVx9tlnk5iYCMChQ4ew2+1ERERU2C8iIoL09PQTHvPpp58mKCjItagZq4iIiIiIiIiIVFWNX5Wyffv2tG/f3nW7f//+7Nq1ixdffJH333//tI45efJkJk2a5Lp9rKGaiIhIdTIMg/Lycux2u9lR5DTZbDY8PDzUQ6wBsNvtlJWVmR1D6hH9/hARaRhqvDB2Ir179+bXX38FoHHjxthsNjIyMipsk5GRUeGqlX/m7e2Nt7d3jecUEZGGq7S0lAMHDlBYWGh2FDlDfn5+REZG4uXlZXYUqSH5+fns3bsXwzDMjiL1jH5/iIjUf6YUxpKSkoiMjATAy8uLHj16sGTJEi677DIAHA4HS5YsYeLEiWbEExGRBs7hcJCcnIzNZqNZs2Z4eXlpxEAdZBgGpaWlZGZmkpycTNu2bbFaa629qtQSu93O3r178fPzIzw8XK9VqRb6/SEi0nBUuTCWn5/Pzp07XbeTk5NJSkoiNDSU6OhoJk+ezL59+5g9ezYA06ZNo2XLlnTu3Jni4mLefvttfvjhBxYtWuQ6xqRJkxg3bhw9e/akd+/eTJs2jYKCAtdVKkVERGpTaWkpDoeDqKgo/Pz8zI4jZ8DX1xdPT09SUlIoLS3Fx8fH7EhSzcrKyjAMg/DwcHx9fc2OI/WIfn+IiDQMVS6MrVmzhnPOOcd1+1ivr3HjxjFr1iwOHDhAamqq6/HS0lLuvvtu9u3bh5+fH926deP777+vcIzRo0eTmZnJlClTSE9PJz4+nu++++64hvwiIiK1SaMD6gf9HBsGjRSTmqDfHyIi9Z/FqAfNGHJzcwkKCiInJ4fAwECz44iISB1XXFxMcnIyLVu21AiBeuBUP0+9h6gbTvVz0utVapL+fYmI1F2VfZ+n/wIREREREREREZEGSYUxEREROaHY2FimTZtWLcdaunQpFouF7OzsajmeiPyhOl+rIiIiDY0pV6UUERGRmnH22WcTHx9fLR+SV69ejb+//5mHEpHj6LUqIiLiHlQYExERaUAMw8But+Ph8fdvAcLDw2shkYiciF6rfygtLcXLy8vsGCIiUk9pKqWIiMjfMAyDwtJyU5aqXCNn/Pjx/PTTT7z00ktYLBYsFguzZs3CYrHw7bff0qNHD7y9vfn111/ZtWsXl156KRERETRq1IhevXrx/fffVzjeX6dnWSwW3n77bUaMGIGfnx9t27Zl4cKFp/19/eyzz+jcuTPe3t7Exsby/PPPV3j8tddeo23btvj4+BAREcEVV1zheuzTTz+la9eu+Pr6EhYWxpAhQygoKDjtLFJ/1IXXqzu/Vu12O//6179o2bIlvr6+tG/fnpdeeum47WbOnOl6/UZGRjJx4kTXY9nZ2fz73/8mIiICHx8funTpwldffQXA1KlTiY+Pr3CsadOmERsbW+H7c9lll/Hkk0/SrFkz2rdvD8D7779Pz549CQgIoGnTplx99dUcPHiwwrE2bdrExRdfTGBgIAEBAQwaNIhdu3bx888/4+npSXp6eoXt77zzTgYNGlSp742IiNRPGjEmIiLyN4rK7HSa8j9Tzr35saH4eVXuz/VLL73E9u3b6dKlC4899hjg/JAI8MADD/Dcc8/RqlUrQkJCSEtL46KLLuLJJ5/E29ub2bNnM3z4cLZt20Z0dPRJz/Hoo4/yzDPP8Oyzz/LKK69wzTXXkJKSQmhoaJWe19q1axk1ahRTp05l9OjRLF++nFtuuYWwsDDGjx/PmjVruP3223n//ffp378/R44c4ZdffgHgwIEDjBkzhmeeeYYRI0aQl5fHL7/8UqUiotRfdeH16s6vVYfDQYsWLfjkk08ICwtj+fLl3HjjjURGRjJq1CgAXn/9dSZNmsR//vMfhg0bRk5ODsuWLXPtP2zYMPLy8vjggw9o3bo1mzdvxmazVep7eMySJUsIDAxk8eLFrvvKysp4/PHHad++PQcPHmTSpEmMHz+eb775BoB9+/YxePBgzj77bH744QcCAwNZtmwZ5eXlDB48mFatWvH+++9z7733uo43Z84cnnnmmSplExGR+kWFMRERkXoiKCgILy8v/Pz8aNq0KQBbt24F4LHHHuP88893bRsaGkpcXJzr9uOPP878+fNZuHBhhZEffzV+/HjGjBkDwFNPPcXLL7/MqlWruPDCC6uU9YUXXuC8887j4YcfBqBdu3Zs3ryZZ599lvHjx5Oamoq/vz8XX3wxAQEBxMTE0L17d8BZGCsvL2fkyJHExMQA0LVr1yqdX8RM7vxa9fT05NFHH3XdbtmyJStWrODjjz92FcaeeOIJ7r77bu644w7Xdr169QLg+++/Z9WqVWzZsoV27doB0KpVq7//pvyFv78/b7/9doUplNdff71rvVWrVrz88sv06tWL/Px8GjVqxPTp0wkKCmLu3Ll4enoCuDIA/Otf/+Ldd991Fca+/PJLiouLXc9LREQaJhXGRERE/oavp43Njw017dzVoWfPnhVu5+fnM3XqVL7++mtXoamoqIjU1NRTHqdbt26udX9/fwIDA4+bylQZW7Zs4dJLL61w34ABA5g2bRp2u53zzz+fmJgYWrVqxYUXXsiFF17omhYWFxfHeeedR9euXRk6dCgXXHABV1xxBSEhIVXOIfVPXX+9usNrdfr06cycOZPU1FSKioooLS11TX88ePAg+/fv57zzzjvhvklJSbRo0aJCQep0dO3a9bi+YmvXrmXq1KmsX7+erKwsHA4HAKmpqXTq1ImkpCQGDRrkKor91fjx43nooYf47bff6Nu3L7NmzWLUqFG6cIGISAOnwpiIiMjfsFgslZ7O6K7++sHvnnvuYfHixTz33HO0adMGX19frrjiCkpLS095nL9+4LRYLK4Pp9UpICCAxMREli5dyqJFi5gyZQpTp05l9erVBAcHs3jxYpYvX86iRYt45ZVXePDBB1m5ciUtW7as9ixSt9T116vZr9W5c+dyzz338Pzzz9OvXz8CAgJ49tlnWblyJQC+vr6n3P/vHrdarcdNey4rKztuu79+HwoKChg6dChDhw5lzpw5hIeHk5qaytChQ13fi787d5MmTRg+fDjvvvsuLVu25Ntvv2Xp0qWn3EdEROo/Nd8XERGpR7y8vLDb7X+73bJlyxg/fjwjRoyga9euNG3alD179tR8wKM6duzo6kn050zt2rVz9SLy8PBgyJAhPPPMM2zYsIE9e/bwww8/AM4P+QMGDODRRx9l3bp1eHl5MX/+/FrLL3Km3PW1umzZMvr3788tt9xC9+7dadOmDbt27XI9HhAQQGxsLEuWLDnh/t26dWPv3r1s3779hI+Hh4eTnp5eoTiWlJT0t7m2bt3K4cOH+c9//sOgQYPo0KHDcSPgunXrxi+//HLCQtsxN9xwA/PmzePNN9+kdevWDBgw4G/PLSIi9ZsKY1Wgpr4iIuLuYmNjWblyJXv27OHQoUMnHSHStm1bPv/8c5KSkli/fj1XX311jYz8Opm7776bJUuW8Pjjj7N9+3bee+89Xn31Ve655x4AvvrqK15++WWSkpJISUlh9uzZOBwO2rdvz8qVK3nqqadYs2YNqampfP7552RmZtKxY8dayy9yptz1tdq2bVvWrFnD//73P7Zv387DDz/M6tWrK2wzdepUnn/+eV5++WV27NhBYmIir7zyCgBnnXUWgwcP5vLLL2fx4sUkJyfz7bff8t133wFw9tlnk5mZyTPPPMOuXbuYPn0633777d/mio6OxsvLi1deeYXdu3ezcOFCHn/88QrbTJw4kdzcXK666irWrFnDjh07eP/999m2bZtrm6FDhxIYGMgTTzzBddddd6bfLhERqQdUGKuEN37axTnPLWXe6jSzo4iIiJzSPffcg81mo1OnTq6pRifywgsvEBISQv/+/Rk+fDhDhw4lISGh1nImJCTw8ccfM3fuXLp06cKUKVN47LHHGD9+PADBwcF8/vnnnHvuuXTs2JEZM2bw0Ucf0blzZwIDA/n555+56KKLaNeuHQ899BDPP/88w4YNq7X8ImfKXV+r//73vxk5ciSjR4+mT58+HD58mFtuuaXCNuPGjWPatGm89tprdO7cmYsvvpgdO3a4Hv/ss8/o1asXY8aMoVOnTtx3332u0XEdO3bktddeY/r06cTFxbFq1SpXQfxUwsPDmTVrFp988gmdOnXiP//5D88991yFbcLCwvjhhx/Iz8/nrLPOokePHrz11lsVppVarVbGjx+P3W5n7NixZ/KtEhGRKsoqKGXl7sO8v2IPDy3YyKgZK7hw2s9mx8Ji1INhULm5uQQFBZGTk0NgYGC1H/+5/23j1R93cmWPFjx7Zdzf7yAiInVacXExycnJtGzZEh8fH7PjyBk61c+zpt9DSPU41c9Jr1epqn/9619kZmaycOHCv91W/75ERKquoKScHQfz2Z6ex7aMPLZn5LEtPY+DeSUn3H7D1AsI9DnxhVPORGXf59XdzqS1KCEmGIC1qVnmBhERERERkdOSk5PDxo0b+fDDDytVFBMRkVMrKbez62CBs/CVkecqhO3NKjrpPi1CfGkfEUC7pgHOrxEB+FXTVdhPlwpjldA9ynn5992ZBWQVlBLi7/U3e4iIiDQsN910Ex988MEJH/vnP//JjBkzajmRiJxIQ36tXnrppaxatYqbbrqJ888/3+w4IiJ1RrndQcqRwuNGgO05XIjdceJJiOEB3q7CV/umjWgXEUDbiAAaebtfGcr9ErmhEH8vWoX7szuzgHVpWZzbIcLsSCIiIm7lscceO2mfIE1RFHEfDfm1unTpUrMjiIi4NcMw2JdddLTwle8qgO3MzKe0/MQXfgn08aB902MFMOfXdhEBhNahAUUqjFVSj+gQdmcWsDZFhTEREZG/atKkCU2aNDE7hoj8Db1WRUTEMAwO5Ze6Cl/HpkLuyMgnv6T8hPv4eFpdRa8/T4WMCPTGYrHU8jOoXiqMVVKPmBA+WbuXxJRss6OIiIiIiIiIiPytnKIydvylB9j2jHyOFJSecHtPm4XW4Y1oGxFA+4hGrpFgUSF+WK11uwB2MiqMVVJCjLPPWFJaNuV2Bx42q8mJRERERERERESgqNTOjoN/HgHmvCpkem7xCbe3WCA2zJ92EY0qjACLbeyPZwOrd6gwVkltwhsR4ONBXnE5W9Pz6NI8yOxIIiIiIiIiItKAlJY7SD5U8JcRYHmkHinEOHEffJoF+VS4CmT7pgG0Dm+Er5e5V4N0FyqMVZLVaqF7dAg/b88kMTVLhTERERERERERqRF2h0HK4QK2H536uP1oAWx3ZgHlJ7kSZKi/F+3/1AS/fVPnlMhAH89aTl+3qDBWBT2OFsbWpmQxtl+s2XFEREREREREpA5zOAzSsgorFL+2Z+Sz6xRXgmzk7eGcAtm0YjP8xo28azl9/aDCWBX0ONpnLDE1y+QkIiIi7mnPnj20bNmSdevWER8fb3YcEREREbdgGAb7sosqjADbkZHPjoN5FJeduADm42mlbZMA2h5rgn+0ANYsyKfOXwnSnagwVgVxUUFYLJB2pIiDucU0CfQxO5KIiEgFZ599NvHx8UybNq1ajjd+/Hiys7NZsGBBtRxPRJz0WhURqZ8MwyA9t5jtGfnsyPijEf7OjDwKSu0n3MfLw0rr8Ea0O1oAcy6NaBHih62eXgnSnagwVgUBPp60jwhga3oeialZXNgl0uxIIiIiIiL1QmlpKV5eXmbHEBGpFMMwyMwvYUdGPtvS89hx8I+RYHnF5Sfcx9NmoVXjRq4RYMcKYNGhfng0sCtBuhN956sowTWdMtvcICIiUnsMA0oLzFlOdnmhExg/fjw//fQTL730EhaLBYvFwp49e/j9998ZNmwYjRo1IiIigmuvvZZDhw659vv000/p2rUrvr6+hIWFMWTIEAoKCpg6dSrvvfceX3zxhet4S5curfK376effqJ37954e3sTGRnJAw88QHn5H28YT3Z+gKVLl9K7d2/8/f0JDg5mwIABpKSkVDmDNCB14PXqLq/V+++/n3bt2uHn50erVq14+OGHKSsrq7DNl19+Sa9evfDx8aFx48aMGDHC9VhJSQn3338/UVFReHt706ZNG9555x0AZs2aRXBwcIVjLViwoMLUn6lTpxIfH8/bb79Ny5Yt8fFxzsb47rvvGDhwIMHBwYSFhXHxxReza9euCsfau3cvY8aMITQ0FH9/f3r27MnKlSvZs2cPVquVNWvWVNh+2rRpxMTE4HCceLqSiMipHM4vYcWuw8xesYeHFmxk1IwVdH98Mb2fXMI1b6/ksa8289GqNNamZJFXXI7NaqF1uD/DujTljvPaMv3qBBbfNZjNj13I/+4azKtXJ3D7eW25sEtTWoU3UlHMZBoxVkU9okP4cGUqa1PUZ0xEpMEoK4Snmplz7v/bD17+ldr0pZdeYvv27XTp0oXHHnsMAE9PT3r37s0NN9zAiy++SFFREffffz+jRo3ihx9+4MCBA4wZM4ZnnnmGESNGkJeXxy+//IJhGNxzzz1s2bKF3Nxc3n33XQBCQ0OrFH/fvn1cdNFFjB8/ntmzZ7N161YmTJiAj48PU6dOPeX5y8vLueyyy5gwYQIfffQRpaWlrFq1Sj015NTqwOvVXV6rAQEBzJo1i2bNmrFx40YmTJhAQEAA9913HwBff/01I0aM4MEHH2T27NmUlpbyzTffuPYfO3YsK1as4OWXXyYuLo7k5OQKhbzK2LlzJ5999hmff/45NpsNgIKCAiZNmkS3bt3Iz89nypQpjBgxgqSkJKxWK/n5+Zx11lk0b96chQsX0rRpUxITE3E4HMTGxjJkyBDeffddevbs6TrPu+++y/jx47Fa9eFTRE4up7CM7QePNsBPd44A23Ewj0P5pSfc3mKB2DB/2jZxjgBre7QhfsvG/nh72Go5vZwuFcaq6FgD/o37cigpt+sfu4iIuI2goCC8vLzw8/OjadOmADzxxBN0796dp556yrXdzJkziYqKYvv27eTn51NeXs7IkSOJiYkBoGvXrq5tfX19KSkpcR2vql577TWioqJ49dVXsVgsdOjQgf3793P//fczZcoUDhw4cNLzHzlyhJycHC6++GJat24NQMeOHU8rh4g7cZfX6kMPPeRaj42N5Z577mHu3LmuwtiTTz7JVVddxaOPPuraLi4uDoDt27fz8ccfs3jxYoYMGQJAq1atqvqtoLS0lNmzZxMeHu667/LLL6+wzcyZMwkPD2fz5s106dKFDz/8kMzMTFavXu0qALZp08a1/Q033MBNN93ECy+8gLe3N4mJiWzcuJEvvviiyvlEpH7KKy77Uw8wZ/FrW3oeB/NKTrpPVKgv7Zo4m9+3i2hE2yYBtGnSCB9P1QTqOhXGqigmzI9Qfy+OFJSyaX8uCdEhZkcSEZGa5unnHAli1rnPwPr16/nxxx9p1KjRcY/t2rWLCy64gPPOO4+uXbsydOhQLrjgAq644gpCQqrn79uWLVvo169fhVFeAwYMID8/n7179xIXF3fS84eGhjJ+/HiGDh3K+eefz5AhQxg1ahSRkerxKadQR1+vZrxW582bx8svv8yuXbtchbfAwEDX40lJSUyYMOGE+yYlJWGz2TjrrLNO+/wAMTExFYpiADt27GDKlCmsXLmSQ4cOuaY/pqam0qVLF5KSkujevftJR8Vddtll3HrrrcyfP5+rrrqKWbNmcc455xAbG3tGWUWk7iksLWfH0b5fx64GuSMjj/05xSfdp3mwr6sHWNsmzhFgbZo0ws9L5ZP6Sj/ZKrJYLCREh/D9lgwSU7JUGBMRaQgslkpPZ3Q3+fn5DB8+nP/+97/HPRYZGYnNZmPx4sUsX76cRYsW8corr/Dggw+ycuVKWrZsWeP5/u787777Lrfffjvfffcd8+bN46GHHmLx4sX07du3xrNJHVVHX6+1/VpdsWIF11xzDY8++ihDhw4lKCiIuXPn8vzzz7u28fX1Pen+p3oMwGq1Yvyl59pf+5cB+Psf/7MaPnw4MTExvPXWWzRr1gyHw0GXLl0oLS2t1Lm9vLwYO3Ys7777LiNHjuTDDz/kpZdeOuU+IlI/HCkoZf66fSzfeYjtB/NIO1J00m0jAr0rNMBve7QQFuDjWYuJxR2oMHYaEmKCnYWxVPUZExER9+Ll5YXd/selwBMSEvjss8+IjY3Fw+PEf/YtFgsDBgxgwIABTJkyhZiYGObPn8+kSZOOO15VdezYkc8++wzDMFyjxpYtW0ZAQAAtWrT42/MDdO/ene7duzN58mT69evHhx9+qMKY1Hlmv1aXL19OTEwMDz74oOu+v17Yolu3bixZsoTrrrvuuP27du2Kw+Hgp59+ck2l/LPw8HDy8vIoKChwFb+SkpL+Ntfhw4fZtm0bb731FoMGDQLg119/PS7X22+/zZEjR046auyGG26gS5cuvPbaa64pqCJSPzkcBr/uPMS8NWks3pRBqb3iRTYaN/KmXcSfeoBFBNC2SQBBfiqAiZMKY6ehx9FRYmtTsiq80RcRETFbbGys68psjRo14tZbb+Wtt95izJgx3HfffYSGhrJz507mzp3L22+/zZo1a1iyZAkXXHABTZo0YeXKlWRmZrp6ecXGxvK///2Pbdu2ERYWRlBQEJ6elX8jecsttzBt2jRuu+02Jk6cyLZt23jkkUeYNGkSVquVlStXnvT8ycnJvPnmm1xyySU0a9aMbdu2sWPHDsaOHVtT3z6RWmP2a7Vt27akpqYyd+5cevXqxddff838+fMrbPPII49w3nnn0bp1a6666irKy8v55ptvuP/++4mNjWXcuHFcf/31rub7KSkpHDx4kFGjRtGnTx/8/Pz4v//7P26//XZWrlzJrFmz/vb7EhISQlhYGG+++SaRkZGkpqbywAMPVNhmzJgxPPXUU1x22WU8/fTTREZGsm7dOpo1a0a/fv0AZ1G+b9++3H///Vx//fV/O8pMROqefdlFfLImjU/W7GVf9h8jw7o0D+Sy+OZ0aR5Eu4gAQv29TEwpdYJRD+Tk5BiAkZOTUyvnKywpN1pP/tqIuf8rY29WYa2cU0REak9RUZGxefNmo6ioyOwoVbZt2zajb9++hq+vrwEYycnJxvbt240RI0YYwcHBhq+vr9GhQwfjzjvvNBwOh7F582Zj6NChRnh4uOHt7W20a9fOeOWVV1zHO3jwoHH++ecbjRo1MgDjxx9/POX5k5OTDcBYt26d676lS5cavXr1Mry8vIymTZsa999/v1FWVmYYhnHK86enpxuXXXaZERkZaXh5eRkxMTHGlClTDLvdXqXvyal+nrX9HkJOz6l+TnX19Wr2a9UwDOPee+81wsLCjEaNGhmjR482XnzxRSMoKKjCNp999pkRHx9veHl5GY0bNzZGjhzpeqyoqMi46667XK/RNm3aGDNnznQ9Pn/+fKNNmzaGr6+vcfHFFxtvvvmm8eePH4888ogRFxd3XK7FixcbHTt2NLy9vY1u3boZS5cuNQBj/vz5rm327NljXH755UZgYKDh5+dn9OzZ01i5cmWF47zzzjsGYKxatepvvxcnU1f/fYnUVyVlduPrDfuNa99ZacQ+8JURc79z6frId8aUBRuN3/dlmx1R3Ehl3+dZDOMvk//roNzcXIKCgsjJyanQMLQmXfLqr2zYm8PLY7pzSZxJlwQXEZEaUVxcTHJyMi1btsTHx8fsOHKGTvXzNOM9hFTdqX5Oer3KyTz++ON88sknbNiw4bSPoX9fIu5hR0Ye81an8fm6fRwpKHXd369VGFf1jmJo56a6OqQcp7Lv8zSV8jQlRIewYW8OiSlZKoyJiIiIiLiJ/Px89uzZw6uvvsoTTzxhdhwROU0FJeV8tWE/c1ensS4123V/RKA3V/RowaieUcSE1b2LrYj7sZodoK5KiHH2GVMDfhERaUieeuopGjVqdMJl2LBhZscTkaMa8mt14sSJ9OjRg7PPPpvrr7/e7DgiUgWGYZCYmsX9n26g15Pfc/9nG1mXmo3NauGCThG8M64ny+4/l3uHdlBRTKqNRoydph5HC2Ob9+dSVGrH10vDNkVEpP676aabGDVq1AkfU3NrEffRkF+rs2bNqlSjfxFxH0cKSvk8cS/zVqex42C+6/6Wjf0Z3SuKkQnNaRKg6cxSM1QYO03NgnxoGuhDem4xG/Zm06dVmNmRREREalxoaCihoaFmxxCRv6HXqoi4O7vD4Nedh5i3OpXFmzMoszvbn/t4WrmoayRX9YqmV2wIFovF5KRS36kwdposFgsJMcF8szGdtalZKoyJiNRD9eD6NIJ+jg2Ffs5SE/TvSqT67c0q5JM1e/lkTRr7c4pd93drEcSonlFcEt+MQB9PExNKQ6PC2BlIiA7hm43pJKZkmx1FRESqkaen881YYWFhvZ9y1BAUFhYCf/xcpX6x2ZztLEpLS/V6lWqn3x8i1aOk3M7izRnMW53GrzsPcazmHOTryYjuzRnVM4pOzarp6tCZ22DfWoiMh/AOYFVrdTk1FcbOwJ8b8BuGoSGeIiL1hM1mIzg4mIMHDwLg5+en3/F1kGEYFBYWcvDgQYKDg10FFDm16dOn8+yzz5Kenk5cXByvvPIKvXv3PuG2s2bN4rrrrqtwn7e3N8XFxSfc/qabbuKNN97gxRdf5M4776yWvB4eHvj5+ZGZmYmnpydWfQCSaqDfHyLVY1t6HvNWpzF/3V6yCstc9/dvHcboXlEM7dwUH89qen0ZBqx6C/73f+A4ei7fUIjpD7EDIWYARHRRoUyOo8LYGejcLBAvDytHCkrZc7iQlo11VQwRkfqiadOmAK7imNRdwcHBrp+nnNq8efOYNGkSM2bMoE+fPkybNo2hQ4eybds2mjRpcsJ9AgMD2bZtm+v2yYrI8+fP57fffqNZs2bVmtlisRAZGUlycjIpKSnVemwR/f4Qqbr8knK+Wr+fuavTSErLdt3fNNCHK3u24MoeUUSH+VXvSUvy4cvb4ffPnLfDO0BWChQdga1fORcAn2BnoSxmAMQOgKbdwKrCd61zOODwDufIvvyDMPBOU+OoMHYGvD1sdG0exNqULBJTslQYExGpR4592G7SpAllZWV/v4O4JU9PT430qIIXXniBCRMmuEaBzZgxg6+//pqZM2fywAMPnHAfi8Xyt4WDffv2cdttt/G///2Pf/zjH9We28vLi7Zt21JaWlrtx5aGS78/RCrPMAwSU7OYtzqNrzYcoLDUDoCH1cJ5HZtwVa9oBrcLx2atgRH4mdtg3rVwaBtYPeD8x6DvLWAvg/3rIOVX2LMM0lZCcTZs+8a5AHgHQnTfo4WygRAZBzZNna5WhgE5e51FsP2JsC8R9idBaZ7zcZsX9L0ZPLxNi6jC2BnqERPC2pQs1qZmcXmPFmbHERGRamaz2fTBSBqE0tJS1q5dy+TJk133Wa1WhgwZwooVK066X35+PjExMTgcDhISEnjqqafo3Lmz63GHw8G1117LvffeW+H+UykpKaGkpMR1Ozc392/3sVqt+Pj4VOr4IiJSPQ7nl/B54j7mrUlj58F81/2twv0Z3TOKkQktCA+owYLHxk9h4e1QVgABkXDlLGehC8DDC6L7OJdBd4O9HA6s/6NQlroCSnJhxyLnAuDp79z+WKGsWYLzOFJ5BYf/KIAdK4YVZB6/naefsxDZvAeUFaowVpclRB/tM5aSZXISERERkdN36NAh7HY7ERERFe6PiIhg69atJ9ynffv2zJw5k27dupGTk8Nzzz1H//792bRpEy1aOP/D8L///S8eHh7cfvvtlc7y9NNP8+ijj57+kxERkRpjdxj8siOTeavT+H5LBmV2Zyd9X08b/+gWyeheUfSMCanZ/qzlJc5eYqvfdt5ueRZc/g40Cj/5PjYPaNHDuQy4Axx2SN8IKcuchbKUZc4RZbt+cC4AHr4Q1QtiBjqnXjbvCZ76TxiXknxnsXH/0SLYvkTIPkFbA6sHNOnkLII1T3B+bdze+TNxA+6Rog5LiAkGYFtGHnnFZQTosrIiIiLSQPTr149+/fq5bvfv35+OHTvyxhtv8Pjjj7N27VpeeuklEhMTq/QBafLkyUyaNMl1Ozc3l6ioqGrNLiIiVZN2pJBP1u7l0zVp7M/54yIrcS2CGN0rmuFxkbXzeTg7FT4Z7yzEAAy+F86eXPVeYVYbNIt3Lv1udfa9Orj5aKHsV+fXwsOQ/LNzAbB5Q4uef/Qoa9EbvKq5X5q7Ki+Fg5uOjgRLdBbDMreC4Th+27A2zuJXswRnIaxpV/B03ytHqzB2hpoE+BAV6kvakSKS0rIZ1PYUFWoRERERN9W4cWNsNhsZGRkV7s/IyKh083FPT0+6d+/Ozp07Afjll184ePAg0dHRrm3sdjt3330306ZNY8+ePSc8jre3N97e5k2pEBERp5JyO4s2ZfDxmjR+3XkIwzk4jGA/Ty6Lb87oXlF0jAysvUA7vofPb4CiLGcj/ZFvQbsLqufYVis07eJc+vzb2Rsrc+sfRbI9y6DgoHM9ZRn8DFg9nQWg2AHOYllUH/BuVD15zORwwOGdFfuCpW8Ee8nx2wY0OzoK7OhIsMh48A2u7cRnRIWxapAQHULakSISU1QYExERkbrJy8uLHj16sGTJEi677DLA2R9syZIlTJw4sVLHsNvtbNy4kYsuugiAa6+9liFDhlTYZujQoVx77bWuBv8iIuJ+tqbnMm91GgvW7SOr8I+LEA1s05hRvaK4oFMEPp612IPVYYef/gs/PQMY0Kw7XPkehMTU3DktFmjS0bn0nuAslB3eWbFQlrcf0n5zLr88DxabM1vsAOf0y+i+4FOLhcPTYRiQu++PqZD7jzbHLzlBf0+fYGcBrFnCH9MiA+r+lXtVGKsGPWJC+CJpP2tT1WdMRERE6q5JkyYxbtw4evbsSe/evZk2bRoFBQWuItbYsWNp3rw5Tz/9NACPPfYYffv2pU2bNmRnZ/Pss8+SkpLCDTfcAEBYWBhhYWEVzuHp6UnTpk1p37597T45ERE5pbziMr7acIC5q9NYn5btur9poA+jerbgyp5RRIWaMG2w4BB8dgPs/tF5u+f1cOF/ar9Zu8UCjds6l57XOQtKWcl/9CfbswxyUmHfGuey7CWwWKFpN2cj/5gBENMPfENqN/dfFR75owB2rBhWcPD47Tx8jzbHP1oEa9YdQls5vw/1jApj1eBYA/51qVk4HAbWmrgErYiIiEgNGz16NJmZmUyZMoX09HTi4+P57rvvXA35U1NTsVqtru2zsrKYMGEC6enphISE0KNHD5YvX06nTp3MegoiIlIFhmGwNiWLeavT+GrDAYrK7AB4WC0M6RjB6N5RDG4bjs2sz7hpq5z9xHL3Oa9iePE0iBttTpa/slichaLQVpBwrfO+7NSjhbKjV77MSoYDSc5lxauABSK6/DH1MmYA+Ied4iRnqLTA2Rz/z1eIzNpzgudig4hOFUeChXd0m+b4Nc1iGMdmCdddubm5BAUFkZOTQ2Bg7Q9TLLc76PboIgpL7Sy6azDtIgJqPYOIiIhUndnvIaRy9HMSEak+B3KKWJV8hN92H2H5rkOkHC50PdY63J/RvaIYmdCCxo1M7PVoGLDyDVj0IDjKIawtjJrtLN7UJbn7KxbKDu84fpvwjs5C2bFRZY2anN657GWQselPI8HWQeaWEzfHD239p5FgR5vj18OLCFT2/UPDKP/VMA+blbgWwazYfZi1KVkqjImIiIiIiIjpDMNgb1YRv+0+zKrkI6xMPkLqkcIK2/h62ri4WyRX9Y4iITqkSlcRrhElebDwNtg033m78wi45BXwroOfswObQbcrnQtAXsYfzfv3LHMWro4tq992btO43dGrXh4tlAVGHn9chwOO7KrYF+zAhpM0x4/84+qQzROcUyLNns7pZlQYqyYJMc7CWGJKFmN6R//9DiIiIiIiIiLVyDAMkg8VsDL5CCuPFsP25xRX2MZqgS7Ng+gdG0qfVmH0ax1GI283KQ0c3ALzrnWOrLJ6wAVPOq8QaXaxrroERECXkc4FnP3TjhXJUpY5R3wd2u5c1r7r3Ca0lbNA1rwHZKccLYQlQUnO8cf3CXIWvo6NBGue4CzOySm5yb/+uq9HjLPiqgb8IiIiIiIiUhscDoOdmfms3H2Y35KPsCr5CJl5FUcNeVgtdGsRRO+WYfRpFUrPmBACfDxNSnwK6+fBV3dCWSEENocrZ0FUb7NT1Sz/xtDpUucCzsb4qSv+mH6ZvhGO7HYu696vuK+Hj7M5vms0WA8IaQl/6gUqlaPCWDXpHuUsjO3OLCCroJQQfy+TE4mIiIiIiEh9YncYbDmQe3Ra5GFW78niSEFphW28PKzERwXTt2UovVuGkRATjJ+XG3/0Ly+B7x6ANTOdt1udA5e/7SwaNTR+odDhH84FoDgHUn+DPb9C+gYIjv6jQX6TjmBzwwJnHeTGr466JcTfi1bh/uzOLGBdWhbndogwO5KIiIiIiIjUYeV2B7/vz2VV8mFW7j7Cqj1HyCsur7CNj6eVHjEh9GkZRu+WocRHBePjaTMpcRVlpcAn42D/OsACZ90HZ90P1jqSv6b5BEG7oc5FaowKY9WoR3QIuzMLWJuiwpiIiIiIiIhUTWm5gw17s509wpKPsHbPEQpK7RW28fey0TM2lD6tQunTMoyuzYPw8qiD0+e2/w8+vxGKs53N4Ee+DW2HmJ1KGiAVxqpRQkwIn6zdS2JKttlRRERERERExM0Vl9lZl5rNymRno/zE1CyKyxwVtgn08aB3S2cRrE+rUDpFBuJhq4OFsGMcdvjxKfjlOeft5j3gyvcgOMrcXNJgqTBWjY414E9Ky6bc7qjbv6xERERERESkWhWWlrM2JYuVu509wtan5VBqr1gIC/P3onfLUFcxrEPTAKzWenJVxvxM+Ox6SP7ZebvXBBj6JHh4m5tLGjQVxqpRm/BGBPh4kFdcztb0PLo0DzI7koiIiIiIiJgkt7iMtXuy+O1oj7Df9+VQ7jAqbNMkwJs+rcLo0zKUPi1DadOkERZLPSmE/Vnqb/DJeMg7AJ7+cMnL0PUKs1OJqDBWnaxWC92jQ/h5eyaJqVkqjImIiIiIiDQgWQWlrN5z5GiPsMNs3p/LX+pgNA/2dRbBWjmvGhkb5lc/C2HHGAb89hosngKOcmjcHkbNhiYdzE4mAqgwVu16HC2MrU3JYmy/WLPjiIiIiIiISA3JzCthVfIR51Ujk4+wNT3vuG1iwvyOjgZz9ghrEeJnQlKTFOfCF7fCloXO210uh+Evg3cjc3OJ/IkKY9UsISYYgMTULHODiIiIiIiISLVKzylm5dEi2Mrdh9mVWXDcNm2aNDraH8xZDGsa5GNCUjeQsQnmXQtHdoHVEy58GnrdAPV5dJzUSSqMVbP4qGAsFkg7UsTBvGKaBDTQX4IiIiIiIiL1QEm5nc9+XE3ymm/5MbcZO43mwB/FnQ5NA45OjQyjd8tQGjdSI3mSPoKv7oLyIghsAaPegxY9zU4lckIqjFWzAB9P2kcEsDU9j8SUbC7s0tTsSCIiIiIiIlJFDofBN2t2cGjRM4wu+wJfSykPesNea3NSmpyLrfMldEg4i2B/FcJcyorh2/sg8T3n7TZDYORb4Bdqbi6RU1BhrAYkxIQ4C2OpWSqMiYiIiIiI1DG/bDtA0hevcFXB+4RbcsECuf6xBBTvp4V9Hy3S34f092F1c+hwMXS8GKL7g60Bf8TO2gMfj4UD6wELnD0ZBt8LVqvZyUROqQG/amtOj+gQPlyZytoU9RkTERERERGpK37fm813C97nkoOvc5t1H1gg2zcK34ueJLDLJVCSBzsWwdavYPsiyN0Hq95wLr6h0P4i6DgcWp0Nng2orc62b2H+v6E4x/l9uPxtaHOe2alEKkWFsRqQEBMCwMZ9OZSU2/H2sJmcSERERERERE4m7Ugh8778ir47p3GPbRNYodAWhHH2/QT3mwAeXs4NfQKh6xXOpawYdi+FLV/Ctm+g6AgkfeBcvBpB2/OdRbK2F4B3gKnPr8bYy+HHJ+DXF523W/SCK2dBUAtTY4lUhQpjNSA2zI9Qfy+OFJSyaX8uCdEhZkcSERERERGRv8gqKGX2/5YTnfQ8kyy/YLUZlFs8Kex+I4Hn3we+wSff2dMH2l/oXOzlkLrcWSTb8hXk7YdN852LzQtaneOcbtn+IvBvXGvPr0blH4RPr4c9vzhv97kZzn/sjyKiSB2hwlgNsFgsJEQH8/2WgySmZKkwJiIiIiIi4kaKy+x88NMmHL++yL+NL/GxlgGQ3foygi9+jMCQmKod0OYBLQc7lwv/C/vXwdYvnYWywzthx/+ci+UOiBnwR1+yujqyKmU5fHId5Kc7R8dd8gp0GWl2KpHTosJYDUmICXEWxlLVZ0xERERERMQd2B0Gn6/ZQ/Ki17mu7CNXY/3s8F4EXfpfglv0OPOTWK3QoodzOe8RyNzmLJBt/dLZmH7PL87lu/uhWXfndMsOwyG83Zmfu6YZBix/Bb6fCoYdwjvCqNl1I7vISagwVkN6HB0ltjYlC8MwsFgsJicSERERERFpmAzDYOnWg/z45fuMzX+HK637wQJ5/jH4/+NJgjteDDXxmc1igSYdnMtZ90JWCmz92lkoS13hHFm2fx0seQwat3eOIus4HCLjaybPmSjOgQW3OC88ANB1FAyfBl7+psYSOVMqjNWQbi2C8bBayMgtYX9OMc2Dfc2OJCIiIiIi0uCsT8vmoy8WcknG6zxm2wxWKPYMxnbOZAL6/AtsnrUXJiQG+t3iXPIPOpv2b/kSdv8Eh7bBL9vgl+chKOrodMvhEN0XrCZf0C19I8y7FrKSnT3TLvwP9Lze/Yp3IqdBhbEa4utlo1OzQDbszWFtSpYKYyIiIiIiIrUo5XABb371Cwk7X+E/tl/BBuUWL8p734TPOfeAT5C5ARs1gR7jnUtxDmxf5JxuuWMx5KTBytedi19j6HCRc7plq7PAw7t2c677AL6+G8qLISgaRs2C5tUw5VTETagwVoMSokPYsDeHxJQsLolrZnYcERERERGReu9QfglvLkoiZN10HrZ+g4/N2Vi/sMPl+F04FY/gaJMTnoBPEHS70rmUFcGuH50jybZ9A4WHIHG2c/EKgHZDnVMu25wP3o1qLlNZEXxzL6x733m77QUw4g3wC625c4qYwFrVHX7++WeGDx9Os2bNsFgsLFiwoNL7Llu2DA8PD+Lj4yvcP3XqVCwWS4WlQ4cOVY3mdhJinH3G1IBfRERERESkZhWWljN98RZef3YyN66/gpttX+BjKaMgsg9M+BG/q2aCOxbF/srT1zlCbMTrcO9OGPsF9LoBAiKhNA9+/xQ+GQ/PtIIPr4J1c6DwSPVmOLIb3jnfWRSzWOHch2DMPBXFpF6q8oixgoIC4uLiuP766xk5svKXY83Ozmbs2LGcd955ZGRkHPd4586d+f777/8I5lH3B7P1OFoY27w/l6JSO75eJs8LFxERERERqWfK7Q4+Xp3GmsUfckvZbNpY9wNQFNAS3388hX/7YXW3F5bNE1qd7VyGPQv71jqnW2750lm82v6tc7HYIHYAdLwEOvwDAs9gxtKWr5xN9ktynNM4r3jHeX6ReqrK1adhw4YxbNiwKp/opptu4uqrr8Zms51wlJmHhwdNmzat1LFKSkooKSlx3c7Nza1yntrQLMiHiEBvMnJL2LA3mz6twsyOJCIiIiIiUi8YhsGizRnM//orxuW9w9VHG+uXeIXged7/4dvzutptrF/TrFaI6uVchjwKB7c4C2RbvoSMjZD8s3P55h5o3tM53bLDcGjcpnLHt5fDkkdh+cvO21F94MpZZ1ZkE6kDqjyV8nS8++677N69m0ceeeSk2+zYsYNmzZrRqlUrrrnmGlJTU0+67dNPP01QUJBriYqKqonYZ8xisbhGja3VdEoREREREZFqsTblCDdP/4KCuf9iRuHd9LNtptzqhb3/nXhPWo+1z431qyj2VxYLRHSCs++Hm3+F25Pggicgqi9ggX1r4Pup8GoPmN4XfngSDqwHwzjx8fLSYfYlfxTF+t4K479WUUwahBqfr7hjxw4eeOABfvnll5NOj+zTpw+zZs2iffv2HDhwgEcffZRBgwbx+++/ExAQcNz2kydPZtKkSa7bubm5blscS4gO4ZuN6SSmZJsdRUREREREpE7blZnPy1+vof3Od3jJ9i3eRxvrl3a+Eq/zH4Fg9/xcWONCW0L/25xLXgZs+9o5kiz5Z8jc4lx+fsbZY63jJdDhYojqDVYb7PkVPrkOCg46m/tf+ip0vszsZyRSa2q0MGa327n66qt59NFHadeu3Um3+/PUzG7dutGnTx9iYmL4+OOP+de//nXc9t7e3nh71/Ilak/TnxvwG4aBpa7ObRcRERERETHJwdxiXv5+C7bE95hi+5QwjzwASlv0x+uip/Bq1t3khG4kIAJ6Xu9cirJg+yLYshB2LoHsVFjxqnPxbwLRfWHr12DYoUknGPV+5adeitQTNVoYy8vLY82aNaxbt46JEycC4HA4MAwDDw8PFi1axLnnnnvcfsHBwbRr146dO3fWZLxa0blZIF4eVo4UlJJyuJDYxv5mRxIREREREakT8kvKeXPpTnb9+gmTLHNo7XEAgNLg1ngNexKvdhfW3cb6tcE3BOJGO5fSQti1xNlcf/u3zhFiWxY6t4sbA/94Abz8zM0rYoIaLYwFBgaycePGCve99tpr/PDDD3z66ae0bNnyhPvl5+eza9curr322pqMVyu8PWx0bR7E2pQs1qZkqTAmIiIiIiLyN8rsDj5alcqixd9yW/ksJtm2Ou/3CcPzvP/DK2Fc/e4hVhO8/KDjcOdiL4M9vzhHkzWLh26jVWCUBqvKhbH8/PwKI7mSk5NJSkoiNDSU6OhoJk+ezL59+5g9ezZWq5UuXbpU2L9Jkyb4+PhUuP+ee+5h+PDhxMTEsH//fh555BFsNhtjxow5g6fmPnrEhDgLY6lZXN6jhdlxRERERERE3JJhGHyzMZ3Z3/7MVfnv8YFtGVjBbvXG2n8ingPvBJ9As2PWfTZPaH2ucxFp4KpcGFuzZg3nnHOO6/axJvjjxo1j1qxZHDhw4JRXlDyRvXv3MmbMGA4fPkx4eDgDBw7kt99+Izw8vKrx3FJCdDAAiSm6MqWIiIiIiMiJ/Lb7MC99vZbBGbOZbfvO1Vjf0XU0tvMebriN9UWkRlkM42TXa607cnNzCQoKIicnh8BA9/vfg4O5xfR+agkWC2x45AICfDTkV0RExB24+3sIcdLPSaR+25aex3Pf/k7kzo+4w+NzwizOxvr26IHYLnzSOdVPRKSKKvv+oUZ7jIlTk0AfokJ9STtSxPq0HAa2bWx2JBEREREREVMdyCnixUXbyElawGTbR7TyTAegPLQtHkOfwNZuqPpeiUiNU2GsliREh5B2pIi1KVkqjImIiIiISIOVU1TGjJ92sfrX77nX+j59PJ2N9e2+YdjOfRCPhHFg00dVEakd+m1TS3rEhPBF0n7WpqrPmIiIiIiINDwl5XbeX5HC5z8s59/lc7jfYzkADps31v63YRtwhxrri0itU2GsliREhwCwLjULh8PAatWQYBERERERqf8cDoOF6/cz43+JXJY/j/lHG+sbWCBuNNZzH4agFmbHFJEGSoWxWtKhaQC+njbyisvZmZlPu4gAsyOJiIiIiIjUqF93HOLZbzYQf3ABH3p8RqhHPgCO2EFYL3hCjfVFxHQqjNUSD5uVuKggftt9hMSULBXGRERERESk3tq0P4f/fLMFv93f8aLHH431HWHtsA59AmvbC9RYX0TcggpjtahHTAi/7T7C2pQsruodbXYcERERERGRalVcZufRLzezdc0PTPaYQ2+vbQA4/MKxnvt/WLuPVWN9EXEr+o1Ui3rEOPuMqQG/iIiIiIjUCw4H5O6FQ9vJ3buZZb+tYEThrj8KYh4+WPvfhnXAHeCtWTMi4n5UGKtF3aOchbHdmQVkFZQS4u9lciIREREREZFKKC2Ewzvh0HY4tOOPr4d3QnkRAIHAMAArGFiwxI3Beu5DENTczOQiIqekwlgtCvH3olW4P7szC1iXlsW5HSLMjiQiIiIiIuJkGJB/8GjR6y8FsJzUk+7msHiwy9GUnY5IsvxiuWDwIBq3HwCN29RieBGR06PCWC1LiA5hd2YBiSnZKoyJiIiIiEjtKy+FrOS/FMCOLiU5J9/PNwQat4PGbaFxO+yhbXlri41nV5Vgx8aQjhFMuyqeRt76mCkidYd+Y9WyHjEhfLp2L2tT1GdMRERERERqUFHWn0Z9/WkE2JFkMOwn3sdiheCYCgUw1+If5tost7iMOz5ax4/bMgEbE89pw6Tz22G16kqTIlK3qDBWy4414E9Ky6bc7sDDZjU5kYiIiIiI1FkOO2SnHu33taNiAawg8+T7efr/pfB1dD20FXj6nPKUuzPzmTB7DbsyC/DxtPLsFXEMj2tWzU9MRKR2qDBWy9qENyLAx4O84nK2pufRpXmQ2ZFERERERMTdleQfbX7/lxFgh3eCveTk+wU2h7A2xxfAApuBpeqju37ensnEDxPJLS4nMsiHt8b21GcaEanTVBirZVarhe7RIfy8PZPE1Cz9ERERERERESfDgLwDFZveH/uau/fk+9m8jha//jICLKwNeAdUUzSDd35N5qlvtuAwnDNhZvyzB+EB3tVyfBERs6gwZoKE6GBnYSwli7H9Ys2OIyIiIiIitcEwoDjHWfzK3f/H18M7/yiAleaffH+/sBP0/mrr7AlmtdVY7JJyOw/O/51P1zqLc6N6tuDxy7rg7VFz5xQRqS0qjJngWJ+xtalqwC8iIiIiUi/YyyAv/fiiV94ByD0Aefudj5cVnvo4FiuEtPxLAawthLWt0Py+thzMK+am99eSmJqN1QIPX9yJ8f1jsZzGNEwREXekwpgJ4qOCsVgg7UgRB/OKaRJw6uaWIiIiIiJiEsOA4uw/ilu5ByoWvY4VvgoyAaNyx/QJgoBmEBjp/Bra8o8RYKEtwcM9pidu2JvNjbPXkp5bTKCPB9OvSWBQ23CzY4mIVCsVxkwQ4ONJ+4gAtqbnkZiSzYVdmpodSURERESk4Skvhfz044tefx7llXsAyosqdzyrBwREOpdjRa8KX48uXn41+7yqwcL1+7n3k/WUlDto06QRb43tScvG/mbHEhGpdiqMmSQhJsRZGEvNUmFMRERERKQ6GQYUZR2d2niCUV7HvhZkVv6YPsHOKzmetOjVzNkDzGqtsadVGxwOg+cWbeO1pbsAOLdDE6ZdFU+gj6fJyUREaoYKYyZJiA7hw5WpJKaoz5iIiIiISKWdcJTXX4tf6ZUf5WXzgoCmfxrp1ewvX4/e7+lbs8/LDeQVl3HXvCS+33IQgJvOas29Q9tjs6qfmIjUXyqMmeRYA/4N+3IoKbfrii4iIiIiIqeyZiYs/a+zKFZZvqFHC1xNT1L0aubcpo6P8qoOew4VMGH2GnYczMfbw8ozV3Tj0vjmZscSEalxKoyZJDbMj1B/L44UlLJpfy4J0SFmRxIRERERcU/bF8FXk3A1t7d5/anA1bRiD69jRa+ASPDURa4qY9nOQ9wyJ5GcojIiAr1589qexEUFmx1LRKRWqDBmEovFQkJ0MN9vOUhiSpYKYyIiIiIiJ3J4F3x2A2BAwjg47xHwCwWLpvedKcMweG/5Hh7/egt2h0F8VDBvXtuDJoEqKIpIw6ExwyZKODqdMjFVfcZERERERI5Tkgdzr4aSHIjqAxc9B/5hKopVg9JyB5M/38jULzdjdxiMTGjO3Bv7qigmIg2ORoyZ6NgosbUpWRiGgUV/4EVEREREnAwDFtwCmVuhUVMYNRs8vMxOVS8cyi/hpvfXsiYlC6sF/u+ijvxrYEt9HhGRBkmFMRPFtQjGZrWQkVvC/pximgfX/yvdiIiIiIhUyq8vwJaFYPWE0e87e4nJGft9Xw43zl7D/pxiAnw8eGVMd85u38TsWCIiptFUShP5etno3CwQgMQUTacUEREREQFgx/ew5HHn+kXPQlRvc/PUE19vOMAVM5azP6eYVo39WXDrABXFRKTBU2HMZH+eTikiIiIi0uAd2Q2fXQ8Y0GM89LzO7ER1nsNh8MKibdz6YSLFZQ7OahfO/FsH0Dq8kdnRRERMp8KYydSAX0RERETkqJJ8mHsNFOdAi14w7BmzE9V5+SXl3PTBWl7+YScANw5uxczxvQjy9TQ5mYiIe1CPMZMlRAcDsHl/LkWldny9bOYGEhERERExg2HAF7fCwc3QKAJGvQ8e3manqtPSjhRyw3tr2JaRh5fNytMju3J5jxZmxxIRcSsaMWay5sG+RAR6U+4w2LA32+w4IiIiIiLmWDYNNi9wNtsfNRsCI81OVKct33WIS179lW0ZeYQHeDP3331VFBMROQEVxkxmsVhcfcYSU7PNDSMiIiIiYoad38P3jzrXh/0Xovuam6eOe3/FHq59ZxVZhWV0axHElxMHuj5ziIhIRSqMuYEeMWrALyIiIiIN1JFk+PRfgAHdr4We15udqM4qLXfw4PyNPPzFJuwOg8vim/Hxv/vRNMjH7GgiIm5LPcbcwJ8b8BuGgcViMTmRiIiIiEgtKC042mw/G5r3hH88D3ovfFoO55dw85xEViUfwWKB+y/swL8Ht9JnCxGRv6HCmBvo3CwQL5uVIwWlpBwuJLaxv9mRRERERERqlmHAFxPh4CbwbwKj1Wz/dG05kMsN761hX3YRjbw9eHlMPOd2iDA7lohInaCplG7A28NG1xZBgKZTioiIiEgDsfwV2PQ5WD2ONttvZnaiOum73w9w+evL2ZddRGyYHwtu7a+imIhIFagw5iYSooMB53RKEREREZF6bdcP8P0jzvUL/wMx/czNUwc5HAbTvt/OTR8kUlhqZ1Dbxnxx60DaNAkwO5qISJ2iwpibUAN+EREREWkQsvbAp9eD4YD4f0KvG8xOVOcUlJRz64eJTPt+BwDXD2jJu+N7EeTnaXIyEZG6Rz3G3MSxyydvy8gjr7iMAB/9URMRERGReqa0EOb+E4qyoFmCmu2fhrQjhUyYvYat6Xl42aw8MaILo3pGmR1LRKTO0ogxN9Ek0IcWIb4YBqxPyzE7joiIiDRQ06dPJzY2Fh8fH/r06cOqVatOuu2sWbOwWCwVFh8fH9fjZWVl3H///XTt2hV/f3+aNWvG2LFj2b9/f208FXE3hgELb4OMjeAf7my27+nz9/uJy6rkI1w6fRlb0/No3Mibj27so6KYiMgZUmHMjWg6pYiIiJhp3rx5TJo0iUceeYTExETi4uIYOnQoBw8ePOk+gYGBHDhwwLWkpKS4HissLCQxMZGHH36YxMREPv/8c7Zt28Yll1xSG09H3M2K6fD7p85m+1e+B0EtzE5Up3y4MpWr3/qNIwWldGkeyMKJA+gRE2p2LBGROk9TKd1IQnQIXyTtVwN+ERERMcULL7zAhAkTuO666wCYMWMGX3/9NTNnzuSBBx444T4Wi4WmTZue8LGgoCAWL15c4b5XX32V3r17k5qaSnR0dPU+AXFfu3+CxQ8714c+DbEDzM1Th5TZHTz+1WZmr3AWnS/uFsmzV8Th62UzOZmISP2gEWNu5NiIscTULBwOw+Q0IiIi0pCUlpaydu1ahgwZ4rrParUyZMgQVqxYcdL98vPziYmJISoqiksvvZRNmzad8jw5OTlYLBaCg4NPuk1JSQm5ubkVFqnDslLgk/HOZvtxV0PvCWYnqjOOFJQy9p1VzF6RgsUC9w5tzytjuqsoJiJSjVQYcyMdmgbg62kjr7icnZn5ZscRERGRBuTQoUPY7XYiIiIq3B8REUF6evoJ92nfvj0zZ87kiy++4IMPPsDhcNC/f3/27t17wu2Li4u5//77GTNmDIGBgSfN8vTTTxMUFORaoqLUQ6nOKi2EeddA0RGIjIeLX1Cz/Uralp7HpdN/ZcXuw/h72Xjz2p7cek4bLPr+iYhUKxXG3IiHzUpcVBAAieozJiIiIm6uX79+jB07lvj4eM466yw+//xzwsPDeeONN47btqysjFGjRmEYBq+//vopjzt58mRycnJcS1paWk09BalJhgFf3gHpG8GvMVw1Bzx9zU5VJyzalM7I15aRdqSI6FA/5t86gPM7Rfz9jiIiUmUqjLkZNeAXERERMzRu3BibzUZGRkaF+zMyMk7aQ+yvPD096d69Ozt37qxw/7GiWEpKCosXLz7laDEAb29vAgMDKyxSB/32Omz8GCw2uHKWmu1XgmEYvPrDDm58fy0FpXb6tw7ji1sH0C4iwOxoIiL1lgpjbiYh+o8+YyIiIiK1xcvLix49erBkyRLXfQ6HgyVLltCvX79KHcNut7Nx40YiIyNd9x0riu3YsYPvv/+esLCwas8ubij5Z1j0kHN96JPQcpC5eeqAolI7Ez9ax3OLtgMwvn8s713fmxB/L5OTiYjUb7oqpZvpfrQwtiuzgKyCUv0hFBERkVozadIkxo0bR8+ePenduzfTpk2joKDAdZXKsWPH0rx5c55++mkAHnvsMfr27UubNm3Izs7m2WefJSUlhRtuuAFwFsWuuOIKEhMT+eqrr7Db7a5+ZaGhoXh56X1OvZSddrTZvh26XQV9bjI7kdvbl13EjbPXsGl/Lp42C49d2oUxvXXVVhGR2qDCmJsJ9feiVbg/uzMLWJeWxbkd1EtAREREasfo0aPJzMxkypQppKenEx8fz3fffedqyJ+amorV+seEg6ysLCZMmEB6ejohISH06NGD5cuX06lTJwD27dvHwoULAYiPj69wrh9//JGzzz67Vp6X1KKyImez/cLD0LQbDJ+mZvt/Y82eI9z0wVoO5ZcS5u/F6//sQe+WoWbHEhFpMCyGYRhmhzhTubm5BAUFkZOTUy96UNzzyXo+XbuXiee04Z6h7c2OIyIiUm/Vt/cQ9ZV+TnWEYcCCm2H9R+AXBjcuhWCNejqVj1alMuWL3ymzG3SMDOStsT1oEeJndiwRkXqhsu8f1GPMDakBv4iIiIjUOavedBbFjjXbV1HspErLHfzf/I1M/nwjZXaDi7o25bOb+6koJiJiAk2ldEPHGvCv35tNud2Bh031SxERERFxY3t+he8mO9cveBxaDjY3jxs7mFfMLR8ksiYlC4sF7rmgPbec3RqLppyKiJhChTE31LZJIwK8PcgrKWdreh5dmgeZHUlERERE5MRy9sLH45zN9ruOgr63mJ3Iba1LzeKmD9aSkVtCgI8HL1/VnXM6NDE7lohIg6ahSG7IarXQ/eh0ysRUTacUERERETdVVgzz/gmFh6BpVxj+kprtn8THq9MY/cZvZOSW0KZJIxZOHKiimIiIG1BhzE0lRAcDkKg+YyIiIiLijgwDvp4E+9eBbyiMngNe6pH1V2V2B1O++J37PttAqd3BBZ0iWHDrAFo29jc7moiIoKmUbsvVgF8jxkRERETEHa1+G5LmgMUKV74LITFmJ3I7mXkl3DonkVV7jgAw6fx2TDynDVarRtWJiLgLFcbcVHxUMBYLpB0p4mBeMU0CfMyOJCIiIiLitGcZfPeAc/38x6DV2abGcUfr07K56YO1HMgpJsDbgxdHxzOkU4TZsURE5C80ldJNBfh40j4iAIDElGxzw4iIiIiIHJOzDz4ZB45y6HIF9JtodiK38+navVz5xgoO5BTTKtyfBRMHqCgmIuKmVBhzY92j1YBfRERERNxIWTF8fC0UZEJEV7jkFTXb/5Myu4OpCzdxzyfrKS13MKRjExbcOoDW4Y3MjiYiIiehwpgbO9ZnTA34RURERMR0hgHf3A371oJvCFz1gZrt/8nh/BL++fZKZi3fA8Ad57XlzWt7EujjaW4wERE5JfUYc2PHCmMb9uVQWu7Ay0N1TBERERExyZp3YN0Hzmb7V8yEkFizE7mN3/fl8O/317Ivuwh/LxsvjI5naOemZscSEZFKUKXFjcWG+RHq70VpuYNN+3PMjiMiIiIiDVXKCvj2fuf6kKnQ+lxT47iT+ev2cvnry9mXXUTLxv4suHWAimIiInWICmNuzGKxkBAdDMBaTacUERERETPk7oePxzqb7XceAf1vNzuRWyi3O3j8q83cNW89JeUOzu3g7CfW9ugFtEREpG5QYczNHWvAvy4129wgIiIiItLwlJfAvGuh4CA06QyXTlezfeBIQSljZ67inV+TAbjt3Da8PbYnQb7qJyYiUteox5ibO9ZnbE3KEQzDwKI3IiIiIiJSW765F/atAZ/go832/c1OZLpN+3O4cbazn5ifl40XRsVxYZdIs2OJiMhpUmHMzcW1CMZmtZCRW8L+nGKaB/uaHUlEREREGoI1MyHxPcACV7wDoa3MTmS6L5L2cf9nGygucxAT5seb1/akfVNNnRQRqcs0ldLN+XrZ6BQZCECi+oyJiIiISG1IXQnf3OdcP28KtBlibh6TldsdPPXNFu6Ym0RxmYOz2oWz8NaBKoqJiNQDKozVAcemU6oBv4iIiIjUuNwD8PG14CiDTpfCwLvMTmSq7MJSrpu1mjd/3g3AzWe3Zub4XgT5qZ+YiEh9oMJYHdD96JUp16WqMCYiIiIiNai8xHkFyvwMCO8Il77WoJvtbzmQy/BXf+WXHYfw9bTx6tXduf/CDtisDfd7IiJS36jHWB1wbMTYpv25FJXa8fWymZxIREREROqlb++HvavAJwiumgPejcxOZJqvNuzn3k82UFRmJyrUlzev7UnHoy1ORESk/tCIsTqgebAvEYHelDsMNuzNNjuOiIiIiNRHa2fB2ncBC1z+DoS1NjuRKewOg/98u5WJH66jqMzOoLaNWXjrQBXFRETqKRXG6gCLxUJCtHPUWGJqtrlhRERERKT+SVsN39zrXD/3IWh7vrl5TJJTWMZ1s1Yz46ddANw4uBXvju9FiL+XyclERKSmaCplHdEjJoRvf09XA34RERERqV556TDvn2AvhY6XwKC7zU5kim3pedz4/hpSDhfi42nlv5d349L45mbHEhGRGlblEWM///wzw4cPp1mzZlgsFhYsWFDpfZctW4aHhwfx8fHHPTZ9+nRiY2Px8fGhT58+rFq1qqrR6rXuR0eMrUvNwjAMk9OIiIiISL1QXgofj4P8dAjvAJc1zGb73248wIjXlpFyuJDmwb58dnN/FcVERBqIKhfGCgoKiIuLY/r06VXaLzs7m7Fjx3Leeecd99i8efOYNGkSjzzyCImJicTFxTF06FAOHjxY1Xj1VpfmgXjZrBwuKCXlcKHZcURERESkPvjuAUj7DbyD4KoPwTvA7ES1yu4weO5/27h5TiKFpXb6tw7jy9sG0rlZkNnRRESkllS5MDZs2DCeeOIJRowYUaX9brrpJq6++mr69et33GMvvPACEyZM4LrrrqNTp07MmDEDPz8/Zs6cWdV49Za3h42uLZx/oDWdUkRERETOWOJsWPMOzmb7bzW4Zvs5RWXc8N5qXv1xJwD/GtiS2df3JlT9xEREGpRaab7/7rvvsnv3bh555JHjHistLWXt2rUMGTLkj1BWK0OGDGHFihUnPF5JSQm5ubkVloYgIToYgMRUFcZERERE5AzsXQtfH+0lds6D0G6ouXlq2Y6MPC6bvowft2Xi7WHlxdFxPHxxJzxsujaZiEhDU+O/+Xfs2MEDDzzABx98gIfH8b3+Dx06hN1uJyIiosL9ERERpKenn/CYTz/9NEFBQa4lKiqqRrK7mx4xzj5jGjEmIiIiIqctL+OPZvsdLm5wzfb/tymdy6YvI/lQAc2CfPjs5v6M6N7C7FgiImKSGi2M2e12rr76ah599FHatWtXbcedPHkyOTk5riUtLa3aju3OEo424N+ekUdecZnJaURERESkzikvhU/GQd5+aNweRswAa8MYJeVwGLyweDv/fn8tBaV2+rQMZeFtA+nSXP3EREQasuOHcFWjvLw81qxZw7p165g4cSIADocDwzDw8PBg0aJFDBw4EJvNRkZGRoV9MzIyaNq06QmP6+3tjbe3d01Gd0tNAn1oEeLL3qwi1qflMLBtY7MjiYiIiEhdsuhBSF0B3oFw1ZwG02w/t7iMSfOS+H6L8+Je4/vH8uA/OuKpqZMiIg1ejf4lCAwMZOPGjSQlJbmWm266ifbt25OUlESfPn3w8vKiR48eLFmyxLWfw+FgyZIlJ2zU39AdGzWm6ZQiIiIiUiXr5sCqN53rI9+Exm3NzVNLdh7M57Lpy/h+y0G8PKw8d2UcUy/prKKYiIgApzFiLD8/n507d7puJycnk5SURGhoKNHR0UyePJl9+/Yxe/ZsrFYrXbp0qbB/kyZN8PHxqXD/pEmTGDduHD179qR3795MmzaNgoICrrvuujN4avVTj5gQFq7frwb8IiIiIlJ5+9bCV3c518/+P2g/zNw8teT7zRncOS+J/JJyIoN8mPHPHsRFBZsdS0RE3EiVC2Nr1qzhnHPOcd2eNGkSAOPGjWPWrFkcOHCA1NTUKh1z9OjRZGZmMmXKFNLT04mPj+e77747riG//NGAPzE1C4fDwGq1mJxIRERERNxafibMuxbsJdD+Ihh8r9mJapzDYfDKDzt58fvtAPSODWX6NQmEBzS8diwiInJqFsMwDLNDnKnc3FyCgoLIyckhMDDQ7Dg1qtzuoOvURRSV2Vl812DaRjSMvhAiIiI1oSG9h6jL9HM6A/YymH0ppCyDsLYw4Qfwqd/fw7ziMu7+eD2LNjt7GI/tF8ND/+iEl4emToqINCSVff+gvw51jIfNSlyU88o56jMmIiIiIqe06CFnUcwrAK76sN4XxXZn5jPiteUs2pyBl83KM5d347FLu6goJiIiJ6W/EHWQGvCLiIiIyN9K+ghWznCuj3wDwtuZm6eG/bA1g0unL2PnwXwiAr2Z9+++jOoVZXYsERFxc1XuMSbm+3OfMRERERGR4+xfB1/e4Vw/637o8A9z89QgwzCY/uNOnl+8HcNwvld+/Z8JNAnwMTuaiIjUASqM1UHdj44Y25VZQHZhKcF+XiYnEhERERG3UVb0R7P9dhfCWQ+YnajGFJSUc88n6/n293QArukTzSPDO2vqpIiIVJr+YtRBof5etGrsD8C61Gxzw4iIiIiIe1n3AeSkQVAUjHwTrPXzLf+eQwWMeG0Z3/6ejqfNwtMju/LkiK4qiomISJXor0YdlRCjPmMiIiIi8hf2cljxqnN9wB3gE2RunhqydNtBLnn1V7Zn5BMe4M3cG/sypne02bFERKQOUmGsjlIDfhERERE5zpaFkLUHfEMh/hqz01Q7wzB4belOrpu1mtzicrpHB/PVbQPpERNqdjQREamj1GOsjjrWgH/93mzK7Q48bKpxioiIiDRohgHLXnKu9/k3ePmZm6eaFZaWc++nG/h6wwEAruoVxaOXdsbbw2ZyMhERqctUGKuj2jZpRIC3B3kl5WxNz6NL8/o5TF5EREREKin5ZziQBB6+0GuC2WmqlcNhcNMHify8PRMPq4Wpl3Tmmj7RWCwWs6OJiEgdp2FGdZTVaiE+OhiAdamaTikiIiLS4C2b5vyaMBb8w0yNUt1mLkvm5+2Z+Hha+XBCX/7ZN0ZFMRERqRYqjNVhPdSAX0REREQADmyAXT+AxQb9bjU7TbX6fV8O//1uKwAPX9yJ3i3VT0xERKqPCmN1mKsBv0aMiYiIiDRsy192fu08AkJizM1SjQpLy7l97jrK7AYXdIrgal15UkREqpkKY3VYfHQwFgukHSniYF6x2XFERERExAxZKfD75871Abebm6WaPfblZnZnFhAR6M1/L++m6ZMiIlLtVBirwwJ9PGkfEQBAYkq2uWFERERExBy/vQaGHVqdA5FxZqepNt9sPMDc1WlYLPDiqHhC/L3MjiQiIvWQCmN1XPej0ynVgF9ERESkASo8AomznesD7zQ1SnXan13EA59tAOCms1rTv01jkxOJiEh9pcJYHacG/CIiIiIN2Kq3oKzQOVKs5Vlmp6kWdofBnfOSyC0uJ65FEJPOb2d2JBERqcdUGKvjEqKDAdiwL4fScoe5YURERESk9pQWwqo3nOsD7oB60n/r9aU7WZV8BH8vGy9d1R1Pmz6yiIhIzdFfmTquZWN/Qvw8KS13sGl/jtlxRERERKS2JM2BwsMQHAMdLzU7TbVITM3ixe93APDYpV2IbexvciIREanvVBir4ywWi6ZTioiIiDQ09nJY/opzvf9tYPMwN081yCsu446567A7DC6Ja8bIhOZmRxIRkQZAhbF64I8G/NnmBhERERGR2rHlC8hOAb8wiL/G7DTVYsoXm0g7UkSLEF+eGNEFSz2ZGioiIu5NhbF6QCPGRERERBoQw4BlLznXe/8bvPzMzVMN5q/by/x1+7Ba4KWr4gn08TQ7koiINBAqjNUD3VoEYbNaSM8tZn92kdlxRERERKQmJf8EB9aDpx/0nmB2mjOWeriQhxdsAuCO89rRIybU5EQiItKQqDBWD/h5edApMhDQqDERERGReu/YaLHu14Jf3S4ildkd3D53Hfkl5fSKDeHWc1qbHUlERBoYFcbqiYToYECFMREREZF67cB62PUDWGzQ71az05yxl5fsICktmwAfD14cHY+HTR9PRESkdukvTz2REHOsAb8KYyIiIiL11rKXnV+7jISQGHOznKHfdh/m1R93AvD0yK60CKn7vdJERKTuUWGsnjjWgH/T/lyKy+wmpxERERGRape1BzbNd673v93UKGcqp7CMu+YlYRhwZY8WXNytmdmRRESkgVJhrJ5oHuxLkwBvyh0GG/bmmB1HRERERKrbitfAsEPrcyGym9lpTpthGEyev4EDOcW0bOzP1Es6mx1JREQaMBXG6gmLxeIaNaY+YyIiIiL1TMFhSJztXB9wh7lZztDHa9L4ZmM6HlYLL10Vj7+3h9mRRESkAVNhrB5JiFZhTERERKReWv0WlBdBZDy0PMvsNKdtV2Y+UxduBuCeoe3p1iLY3EAiItLgqTBWj/y5Ab9hGCanEREREZFqUVoIK99wrg+4AywWc/OcppJyO7d/tI6iMjv9W4dx46BWZkcSERFRYaw+6dI8EC+blcMFpaQcLjQ7joiIiIhUh6Q5UHQEQmKh4yVmpzltzy/azqb9uYT4efLCqHis1rpZ4BMRkfpFhbF6xNvDRpfmgQAkpmo6pYiIiEidZy+H5a841/tNBFvd7Mf1y45M3vx5NwD/vbwbTYN8TE4kIiLipMJYZdWRqYlqwC8iIiJSj2z5ArJTwC8M4q8xO81pOZxfwqSP1wPwz77RXNC5qcmJRERE/qDCWGXs+hHeHgL7Es1O8rfUgF9ERESknjAM+HWac73PTeDlZ2qc02EYBvd9uoHMvBLaNmnEgxd1MjuSiIhIBSqMVcb6ubBvDfzwhNlJ/taxBvzbM/LIKy4zOY2IiIiInLbdSyF9A3j6Qa8bzE5zWt7/LYUlWw/i5WHl5THd8fWymR1JRESkAhXGKuPsB8DqAbuWwJ5lZqc5pYhAH1qE+OIwYH1ajtlxREREROR0LXvJ+TVhLPiFmpvlNGxLz+OJr7cAMHlYBzpGBpqcSERE5HgqjFVGaEvnGxKAHx53+35jx6ZTqgG/iIiISB11YD3s/hEsNuh7i9lpqqy4zM7tH62jtNzB2e3DGd8/1uxIIiIiJ6TCWGUNvhc8fCB1BexcYnaaU1IDfhEREZE6btnLzq9dRkJIjLlZTsPT32xhW0YejRt589yVcVgsFrMjiYiInJAKY5UV2OyP3g5uPmrszyPGHA73zSkiIiIiJ5C1BzZ97lwfcIepUU7Hki0ZvLciBYDnruxG40beJicSERE5ORXGqmLgXeDVCA4kwZYvzU5zUh0iA/D1tJFXXM6uzHyz44iIiIhIVayYDoYDWp8HTbuanaZKDuYWc++nGwD418CWnN2+icmJRERETk2Fsarwbwx9b3au//gkOOzm5jkJT5uVuKggQNMpRUREROqUgsOQ+L5zvY6NFnM4DO7+ZD1HCkrpGBnIfRe2NzuSiIjI31JhrKr6TQSfIMjcChs/NTvNSakBv4iIiEgdtPotKC+CyHhoOdjsNFXyzq/J/LLjED6eVl4ZE4+3h83sSCIiIn9LhbGq8g2GAXc615c+BfYyM9OclBrwi4iIyOmYPn06sbGx+Pj40KdPH1atWnXSbWfNmoXFYqmw+Pj4VNjGMAymTJlCZGQkvr6+DBkyhB07dtT006ibSgth5RvO9QF3QB1qWP/7vhye+d9WAKZc3Jk2TQJMTiQiIlI5Koydjj7/Bv8mzsao6943O80JdT86YmxXZgHZhaUmpxEREZG6YN68eUyaNIlHHnmExMRE4uLiGDp0KAcPHjzpPoGBgRw4cMC1pKSkVHj8mWee4eWXX2bGjBmsXLkSf39/hg4dSnFxcU0/nbpn3QdQdARCYqHTpWanqbTC0nJu/2gdZXaDoZ0jGNM7yuxIIiIilabC2Onw8odBdzvXf3oWytzvjV2ovxetGvsDsC4129wwIiIiUie88MILTJgwgeuuu45OnToxY8YM/Pz8mDlz5kn3sVgsNG3a1LVERES4HjMMg2nTpvHQQw9x6aWX0q1bN2bPns3+/ftZsGBBLTyjOsReDiteca73vw2sdWca4mNfbmb3oQKaBvrwn5HdsNShkW4iIiIqjJ2untdBYAvI2w9r3jE7zQklaDqliIiIVFJpaSlr165lyJAhrvusVitDhgxhxYoVJ90vPz+fmJgYoqKiuPTSS9m0aZPrseTkZNLT0yscMygoiD59+pzymCUlJeTm5lZY6r3NCyA7FfwaQ/w1ZqeptG82HmDu6jQsFnhhdBwh/l5mRxIREakSFcZOl4c3nHWfc/2XF6Ak39w8J6AG/CIiIlJZhw4dwm63VxjxBRAREUF6evoJ92nfvj0zZ87kiy++4IMPPsDhcNC/f3/27t0L4NqvKscEePrppwkKCnItUVH1fGqeYcCyl5zrff4Nnr7m5qmk/dlFPPDZBgBuPqs1/Vs3NjmRiIhI1akwdibir4bQVlB4CFa+bnaa4xxrwJ+Ulk253WFyGhEREalv+vXrx9ixY4mPj+ess87i888/Jzw8nDfeeOOMjjt58mRycnJcS1paWjUldlO7l0L6BvD0g143mJ2mUuwOgzvnJZFbXE5ciyDuOr+d2ZFEREROiwpjZ8LmCec86Fxf9goUudfIrLZNGhHg7UFhqZ2t6XlmxxERERE31rhxY2w2GxkZGRXuz8jIoGnTppU6hqenJ927d2fnzp0Arv2qekxvb28CAwMrLPXasmnOrwnjwC/U1CiV9dqPO1mVfAR/LxsvXdUdT5s+VoiISN2kv2BnqvNIaNIZSnJg2ctmp6nAarUQHx0MwDpNpxQREZFT8PLyokePHixZssR1n8PhYMmSJfTr169Sx7Db7WzcuJHIyEgAWrZsSdOmTSscMzc3l5UrV1b6mPXe/iTniDGLDfrdYnaaSlmbksW0JTsAeOzSLsQeveCTiIhIXaTC2JmyWuHco6PGVs6A/JNfztwMx/qMqQG/iIiI/J1Jkybx1ltv8d5777FlyxZuvvlmCgoKuO666wAYO3YskydPdm3/2GOPsWjRInbv3k1iYiL//Oc/SUlJ4YYbnNMBLRYLd955J0888QQLFy5k48aNjB07lmbNmnHZZZeZ8RTdz/Kj/7Ha5XIIjjY3SyXkFpdxx9x12B0Gl8Q1Y2RCc7MjiYiInBEPswPUC+0vguY9YN9aZyP+Yf8xO5HLsT5jianZ5gYRERERtzd69GgyMzOZMmUK6enpxMfH891337ma56empmK1/vH/qllZWUyYMIH09HRCQkLo0aMHy5cvp1OnTq5t7rvvPgoKCrjxxhvJzs5m4MCBfPfdd/j4+NT683M7WXtg03zn+oDbTY1SWVMW/M7erCJahPjyxIguWCwWsyOJiIicEYthGIbZIc5Ubm4uQUFB5OTkmNeDYtcP8P4IsHnB7esgqIU5Of4it7iMuEcXYRiw+sEhhAd4mx1JRETEbbjFewj5W/X25/T1PbD6LWh9Hlz7udlp/tb8dXu5a956rBb45KZ+9IipG/3QRESkYars+wdNpawurc6BmIFgL4WfnjE7jUugjyftmgQAkKg+YyIiIiLuoeAQrPvAuT7wTlOjVEbK4QIeXrAJgDvOa6eimIiI1BsqjFUXiwXOe9i5vu4DOLzL3Dx/knBsOqX6jImIiIi4h1VvQXkRNOsOsYPMTnNKZXYHd8xNIr+knF6xIdx6TmuzI4mIiFQbFcaqU3RfaHsBGHZY+rTZaVwSjl6ZUg34RURERNxAaQGsetO5PuAO53+wurGXvt9BUlo2AT4evDg6Hg+bPkKIiEj9ob9q1e3ch5xfN34KGZvNzXLUsQb8G/blUFruMDmNiIiISAO3bg4UHYGQWOh4idlpTum33YeZvnQnAE+P7EqLED+TE4mIiFQvFcaqW2QcdLoUMODHJ81OA0DLxv6E+HlSWu5g0/4cs+OIiIiINFz2cljxinO9/21gtZmb5xSyC0u5a14ShgGjerbg4m7NzI4kIiJS7VQYqwnnPAgWK2z9CvatNTsNFouFhOijfcZSs80NIyIiItKQbV4A2ang1xjirzE7zUkZhsEDn23kQE4xLRv788jwzmZHEhERqREqjNWE8PbQbbRz/YcnzM1ylBrwi4iIiJjMMGDZNOd6n5vA09fUOKcyb3Ua321Kx9Nm4eWruuPv7WF2JBERkRqhwlhNOet+sHrArh9gz69mp3GNGFMDfhERERGT7P4R0jeCpx/0+pfZaU5q58F8Hv3S2Sv3ngva07VFkMmJREREao4KYzUltCUkjHOuL3nc+T+EJoqLCsJmtZCeW8z+7CJTs4iIiIg0SMtecn5NGAd+oeZmOYmScjt3zF1HUZmdAW3CmDColdmRREREapQKYzVp8L3g4QNpv8HO702N4uflQafIQECjxkRERERq3f51sHspWGzQ7xaz05zUc//bxqb9uYT4efLCqHisVovZkURERGqUCmM1KTASet3gXP/B/FFjCdHBACSmqjAmIiIiUquWvez82vUKCI42N8tJ/Lw9k7d+SQbgmSviiAj0MTmRiIhIzVNhrKYNnARejeDAetiy0NQoasAvIiIiYoIjyc6rUQL0v93UKCdzKL+ESR+vB+DavjGc3ynC5EQiIiK1Q4WxmuYfBn2PDpf/4Ulw2E2LcqwB/6b9uRSXmZdDREREpEFZMR0MB7QZAk27mJ3mOIZhcN+nGziUX0LbJo148B8dzY4kIiJSa1QYqw39J4JPMBzaBhs/MS1GixBfmgR4U+4w2LA3x7QcIiIiIg1GwSFY94FzfcAd5mY5idkrUvhh60G8PKy8PKY7Pp42syOJiIjUGhXGaoNP0B9vhH58CspLTYlhsVjocXQ6pRrwi4iIiNSCVW9CeRE06w6xg8xOc5yt6bk8+c0WAP5vWAc6Hr1Yk4iISEOhwlht6fNv8G8C2Smw7n3TYhybTqkG/CIiIiI1rLTAWRgDGHAnWNzrCo/FZXZu/2gdpeUOzmkfzrj+sWZHEhERqXUqjNUWL38YfI9z/ednoazIlBh/bsBvmHyVTBEREZF6bd0HUJQFIS2h43Cz0xznqW+2sD0jn8aNvHn2yjgsbla4ExERqQ0qjNWmHuMhKAryDsDqd0yJ0KV5IF42K4cLSkk5XGhKBhEREZF6z14Oy191rve/Dazu1bfr+80ZzF6RAsDzo+Jo3Mjb5EQiIiLmUGGsNnl4w1n3Odd/fQFK8mo9greHjS7Nnb0jNJ1SREREpIZsXgA5qeAfDvFXm52mgozcYu79dD0ANwxsyVntwk1OJCIiYh4Vxmpb3NUQ2hoKD8NvM0yJcKzPmBrwi4iIiNQAw4BfpznX+/wbPH1NjfNnDofB3R+vJ6uwjE6Rgdx7YXuzI4mIiJhKhbHaZvOAc/7Pub78FSg8UusRjl2ZMjE1u9bPLSIiIlLv7foBMjaCpz/0/JfZaSp4+9fd/LrzED6eVl4e0x1vD/ea4ikiIlLbVBgzQ+eR0KQzlOTA8pdr/fTHGvBvS88lr7is1s8vIiIiUq8te8n5tcc48As1N8ufbNybw7P/2wbAI8M706ZJI5MTiYiImK/KhbGff/6Z4cOH06xZMywWCwsWLDjl9r/++isDBgwgLCwMX19fOnTowIsvvlhhm6lTp2KxWCosHTp0qGq0usNqhXMfcq6vfAPyMmr19BGBPjQP9sVhwPq0nFo9t4iIiEi9tn8dJP8EFhv0vcXsNC4FJeXcPncdZXaDCzs35apeUWZHEhERcQtVLowVFBQQFxfH9OnTK7W9v78/EydO5Oeff2bLli089NBDPPTQQ7z55psVtuvcuTMHDhxwLb/++mtVo9Ut7YdB8x5QVuhsxF/L/phOqT5jIiIiItVm2dHZAF2vgGD3KT499uVmkg8V0DTQh/9c3hWLxWJ2JBEREbfgUdUdhg0bxrBhwyq9fffu3enevbvrdmxsLJ9//jm//PILN9544x9BPDxo2rRppY5ZUlJCSUmJ63Zubm6l87gNiwXOfRjevwzWzIR+E2v1zVNCdDAL1+9XA34RERGR6nJkt/NqlAAD7jA1yp99veEA89akYbHAi6PjCfbzMjuSiIiI26j1HmPr1q1j+fLlnHXWWRXu37FjB82aNaNVq1Zcc801pKamnvQYTz/9NEFBQa4lKsp9/jeuSlqdDbGDwF4KPz9Tq6fuGevsd7Fi12F2ZOTV6rlFRERE6qUV08FwQJvzIaKz2WkA2JddxOTPNwBwy9mt6dc6zOREIiIi7qXWCmMtWrTA29ubnj17cuutt3LDDTe4HuvTpw+zZs3iu+++4/XXXyc5OZlBgwaRl3figs3kyZPJyclxLWlpabX1NKrXsVFjAOvmwOFdtXbqzs0COad9OKV2B/d9tgG7w6i1c4uIiIjUOwWHYN0HznU3GS1mdxjcNTeJ3OJy4qKCuXNIO7MjiYiIuJ1aK4z98ssvrFmzhhkzZjBt2jQ++ugj12PDhg3jyiuvpFu3bgwdOpRvvvmG7OxsPv744xMey9vbm8DAwApLnRXdB9peAIYdfnyq1k5rsVh4ckRXGnl7sC41m1nL99TauUVERETqnVVvQnkxNEuA2IFmpwHgtR93smrPEfy9bLx8VTyeNl2QXkRE5K9q7a9jy5Yt6dq1KxMmTOCuu+5i6tSpJ902ODiYdu3asXPnztqKZ65jV6j8/TPI2FRrp20W7Mv/XdQRgGf/t5WUwwW1dm4RERGReqO0wFkYA+doMTdobL82JYtpS3YA8PhlXYgJ8zc5kYiIiHsy5b+NHA5Hheb5f5Wfn8+uXbuIjIysxVQmioyDTpcBBvzwZK2eekzvKPq1CqO4zMH9n23AoSmVIiIiIlWT+D4UZUFoK+g43Ow0lNkd3DUvCbvD4NL4Zozo3tzsSCIiIm6ryoWx/Px8kpKSSEpKAiA5OZmkpCRXs/zJkyczduxY1/bTp0/nyy+/ZMeOHezYsYN33nmH5557jn/+85+ube655x5++ukn9uzZw/LlyxkxYgQ2m40xY8ac4dOrQ855ECxW2PY17F1ba6e1WCz85/Ku+Hra+G33ET5affKLHoiIiIjIX9jLYMWrzvX+t4HVZm4eYPP+XFKPFBLo48Hjl3XB4gYj2ERERNxVlQtja9asoXv37nTv3h2ASZMm0b17d6ZMmQLAgQMHKlxR0uFwMHnyZOLj4+nZsyfTp0/nv//9L4899phrm7179zJmzBjat2/PqFGjCAsL47fffiM8PPxMn1/dEd4Oul3lXP/h8Vo9dUyYP/cMbQ/A099sZX92Ua2eX0RERKTO2rQActLAPxzi3OM/dZPSsgHoHh1CoI+nuWFERETcnMUwjDo/dy43N5egoCBycnLqdiP+rD3wSk9wlMG4r6DloFo7td1hcOWM5SSmZnN2+3DeHd9L/7soIiL1Xr15D1HPue3PyTBgxiDI2OjsGTv4XrMTAXDXvCTmr9vHHee15a7zdSVKERFpmCr7/kGXpnEnIbGQcHQa6g+PO99s1RKb1cIzV3TDy2Zl6bZMPk/cV2vnFhEREamTdv3gLIp5+kPPf5mdxuXYiLH46GBTc4iIiNQFKoy5m8H3gocPpK2EHYtr9dRtmgRwx5C2ADz21WYO5hXX6vlFRERE6pRl05xfe4wHv1Azk7hkF5aSfMh5pfH4FsHmhhEREakDVBhzN4GR0HuCc/2Hx8HhqNXT3zi4FZ2bBZJTVMaUBZtq9dwiIiIidca+REj+Gawe0Pdms9O4HBst1rKxPyH+XuaGERERqQNUGHNHA+4CrwBI3wBbFtbqqT1tVp65ohseVgvfbUrnm40HavX8IiIiInXC8pedX7tcAcFR5mb5E9c0yqhgU3OIiIjUFSqMuSP/MOh3i3P9x6fAYa/V03duFsQtZ7cGYMoXv3OkoLRWzy8iIiLi1o7shs1fONcH3G5ulr9QYUxERKRqVBhzV/1uBZ9gOLQNNnxc66e/9dw2tG3SiEP5pTz2paZUioiIiLgsfxUMB7Q5HyI6m53GxTAM1qswJiIiUiUqjLkrnyAYeKdzfelTUF67o7a8PWw8c0U3rBZYkLSfJVsyavX8IiIiIm4pPxOS5jjXj71XcxMphwvJKizDy+P/27vv8KjqtI3j35lJD8kkIY1AQugQSoiUSBWUIqsoVnRZRGyrC7iaVV/ZtbvKuusqrqBYsCtgQ7FhQTpIaAGkBwgJJY2QTurM+8dAIALSkpyZzP25rnMxc3LKc97zLvy88zvPMdOp2elfSy8iIiLHKRhzZr3vAv9wyE+H9e81+OkTYoK5vX8rAP4x91cKyyobvAYRERERp5L8OlSVQfMe0LKf0dXUsj7jMACdowLx8tAwX0RE5GzoX0xn5uUPAx90fF7yPFQeafASkoZ2ILapH5mFZUz5dmuDn19ERETEaZQXO4IxgH5/BZPJ2Hp+IyU9H9BjlCIiIudCwZiz6zEOrNFQdBBWv9ngp/f1svDcdd0AmJWcwfLU3AavQURERMQprP8AyvIhpDV0vNLoak6ixvsiIiLnTsGYs/Pwhkv+z/F52YtQXtTgJSS2bsrYi1sC8PDnGykpr2rwGkREREQMVV0JK6c5PvedBGaLsfX8RlllNVsOFgKQEB1scDUiIiKuQ8GYK4i/GZq2hdJD8MurhpTwfyM60jzIl4y8I/zn++2G1CAiIiJimM1zoSAD/MMg/o9GV3OSLQcLqay2E+LvRXSIr9HliIiIuAwFY67A4gGDJjs+r3gZSvMavIQm3h48e21XAN5dmcaatIavQURERMQQdjssf8nxOfFu8PQxtp5TOLG/mMnJep+JiIg4MwVjrqLztRDRBcoLjw/MGtgl7cO4oUcL7HZ46NONlFVWG1KHiIiISIPatQCyfgVPf+h1u9HVnJL6i4mIiJwfBWOuwmyGwf9wfF71GhRlGVLGI1fEERbgze7cEqb+tNOQGkREREQa1LFfSva4FXyds3+XgjEREZHzo2DMlXQYAc17QtURWPpfQ0qw+nnyzKguALyxdDcb9+UbUoeIiIhIg9i/DvYsAbMH9PmL0dWc0qHictLzSgGIVzAmIiJyThSMuRKTCS571PF57duQn2FIGcM6R3Jlt2ZU2+w89OlGKqpshtQhIiIiUu+OzRbregNYWxhby2lsOPqLytZh/lh9PY0tRkRExMUoGHM1rQdB7ACoroDFzxlWxpNXdSbE34ttmUW8umiXYXWIiIiI1JtDu2DrPMfnvpOMreV3nNh4X0RERM6NgjFXdNljjj9TPoLcVENKaNrEm8dHxgEwbeFOtmcWGVKHiIiISL1ZOR3sNmg3DCI6G13Naa0/2l8sIcY5+5+JiIg4MwVjrii6N7QbDvZqWPSsYWVcFR/FkE4RVFbbeejTDVRV65FKERERaSSKcyDlQ8fnfn81tpbfYbPZ2XAsGNOMMRERkXOmYMxVXfqI489fP4PMXw0pwWQy8cw1XQjw8WDDvgJmLttjSB0iIiIidS75Nagqg+Y9oGU/o6s5rT2HSigsq8Lbw0yHyACjyxEREXE5CsZcVbNu0Pkax+eFzxhWRkSgD49e4Xik8oUfd7A7p9iwWkRERETqRHkxJL/h+NzvPscLkJzUsf5iXZtb8bRoaC8iInKu9K+nKxv0dzCZYfu3sG+NYWXc0LMFA9qFUl5l4/8+24jNZjesFhEREZELtv59KMuHkDbQ8Qqjq/ldKUcfo1TjfRERkfOjYMyVhbWH+Jsdn39+2rAyTCYTz17TFT8vC6vTDvP+L3sNq0VERETkglRXOprug+NNlGaLsfWcQU0wFhNkaB0iIiKuSsGYq7vk/8DsCbsXwZ4lhpURHeLHwyM6AvDc/G1k5JUaVouIiIjIeds8FwoywD/s+C8gnVRZZTVbDxYCmjEmIiJyvhSMubrgltBjnOPzgqfBbtxjjH9KbEnv2BBKK6qZ/Pkm7AbWIiIiInLO7HZY/pLjc+Ld4OljbD1n8Ov+AqpsdkKbeNM8yNfockRERFySgrHGYMAD4OED+5Jh5w+GlWE2m/jXdV3x9jCzLDWXT9bsM6wWERERkXOWugCyfgWvJtDrdqOrOaMT+4uZnPgFASIiIs5MwVhjENgMet/p+Pzz02CzGVZK67AmJA1tD8DT32whq7DMsFpEREREzsnyqY4/e9wKvsFGVnJW1h8NxhLUX0xEROS8KRhrLPrdD14BkLkJtn5paCm3929FfAsrRWVV/GOuHqkUERERF7B/LaQtBbMHXHyP0dWclZT0fED9xURERC6EgrHGwr8p9Jng+LzwWbBVG1aKh8XMv6+Px9Ni4qet2czbcMCwWkRERETOyvL/Of7segNYWxhby1nIKSpnf/4RTCbo1sJqdDkiIiIuS8FYY9JngmPaf+4O2DjH0FI6RAYwcXA7AJ78aguHissNrUdERETktA7tgq3zHJ/73mtsLWfpWH+xtmFNCPDxNLYYERERF6ZgrDHxCYR+9zk+L5oCVRWGlnPPoDZ0jAwgr6SCx+dtNrQWERERkdNaOQ3sNmg3HCLijK7mrKRkHAb0GKWIiMiFUjDW2PS+C5pEQH46rHvX0FK8PMz85/p4LGYTX288yPebMw2tR0REROQkxdmw/kPH535/NbaWc1DzRko13hcREbkgCsYaGy8/GPCA4/OS56Gi1NByurawctfA1gA88sWvFJRWGlqPiIiISC3Jr0N1OTTvCS37Gl3NWbHZ7GzMKAA0Y0xERORCKRhrjHqMA2sMFGfC6jeNroa/XtaO1mH+5BSV8/Q3W4wuR0REROS4VpdA68GO2WImk9HVnJVdOcUUlVfh62mhQ0SA0eWIiIi4NAVjjZGHNwz6P8fnZS9CWaGh5fh4Wvj3dd0wmeDTtftYvCPH0HpEREREarQaALd8AXFXGV3JWVt/9DHKri2seFg0nBcREbkQ+pe0sep2EzRtB0fy4JdXja6GnrEhjOsTC8DfP99EcXmVsQWJiIiIuKhj/cUS9BiliIjIBVMw1lhZPGDwZMfnFS9DaZ6x9QAPXd6B6BBf9ucf4bnvthldjoiIiIhLSknPB9RfTEREpC4oGGvM4q6BiK5QUQTLpxpdDX5eHvzr2m4AvP/LXn7ZfcjgikRERERcy5GKarZnFQF6I6WIiEhdUDDWmJnNcOk/HJ9XvQ5FmcbWA/RrG8rNvaMBePizjRypqDa4IhERERHXsWl/AdU2OxGB3jSz+hpdjoiIiMtTMNbYtb/c8frxqiOw9L9GVwPA5D90IjLQh7RDpbzw43ajyxERERFxGevTDwN6jFJERKSuKBhr7EwmuOwxx+c1b0N+urH1AIE+njxzTRcAZi7bUzPAExEREZHfd6zxfvfoYGMLERERaSQUjLmD1pdAq4Fgq4TFzxldDQCXdYrgmoTm2Ozw0KcbKa/SI5UiIiIiZ3I8GAsytA4REZHGQsGYu7j06KyxlFmQu9PYWo567Mo4Qpt4sTO7mGk/pxpdjoiIiADTp08nNjYWHx8fEhMTSU5OPqv9Zs+ejclkYtSoUbXWFxcXM3HiRFq0aIGvry9xcXHMmDGjHipv/LIKyzhYUIbZBN1aWI0uR0REpFFQMOYuons5+o3Zq2Hhs0ZXA0CwvxdPXe14pPLVRbvYfKDA4IpERETc25w5c0hKSuLxxx9n3bp1xMfHM3z4cLKzs393v7S0NB544AEGDBhw0s+SkpKYP38+H3zwAVu3buW+++5j4sSJzJs3r74uo9Fan54PQPuIAPy9PYwtRkREpJFQMOZOBh99Q+XmzyFzk7G1HPWHrs24vHMkVTY7D326kcpqm9EliYiIuK0XXniBO++8k/Hjx9fM7PLz8+Ott9467T7V1dWMGTOGJ598ktatW5/08xUrVjBu3DgGDRpEbGwsd911F/Hx8Wc9E02O02OUIiIidU/BmDtp1g06X+P4/PMzxtZygqdGdcbq68nmA4W8vmS30eWIiIi4pYqKCtauXcuQIUNq1pnNZoYMGcLKlStPu99TTz1FeHg4t99++yl/3rdvX+bNm8f+/fux2+0sXLiQHTt2MGzYsNMes7y8nMLCwlqLQEqG3kgpIiJS1xSMuZvB/wCTGXZ8Bxmrja4GgPAAHx67Mg6Al37aSWp2kcEViYiIuJ/c3Fyqq6uJiIiotT4iIoLMzMxT7rNs2TJmzpzJG2+8cdrjvvzyy8TFxdGiRQu8vLy4/PLLmT59OgMHDjztPlOmTMFqtdYs0dHR53dRjUi1zc6mfY62E91jgowtRkREpBFRMOZuQttB/B8dn39+2thaTnDtRc0Z1CGMimobD326kWqb3eiSRERE5HcUFRUxduxY3njjDUJDQ0+73csvv8wvv/zCvHnzWLt2Lf/973+ZMGECP/3002n3mTx5MgUFBTVLRkZGfVyCS9mZXURJRTX+XhbahQcYXY6IiEijoa6d7uiSh2DjHNizGHYvhtaXGF0RJpOJZ6/pyrAXl7AuPZ93VqRxe/9WRpclIiLiNkJDQ7FYLGRlZdVan5WVRWRk5Enb79q1i7S0NEaOHFmzzmZz9Ar18PBg+/btREVF8fe//525c+dyxRVXANCtWzdSUlJ4/vnnaz22eSJvb2+8vb3r6tIahZSjjfe7trBiMZuMLUZERKQR0YwxdxTcEnrc6vg8fzKU5hlazjFRQb5M/kNHAP7z/Tb2HioxuCIRERH34eXlRY8ePViwYEHNOpvNxoIFC+jTp89J23fs2JFNmzaRkpJSs1x11VUMHjyYlJQUoqOjqayspLKyErO59pDTYrHUhGhydo433g82thAREZFGRjPG3NXAB+DXzyB7M7x1OYydC9bmRlfFzb1i+HrDQVbuPsTDn23iwzsSMeu3oiIiIg0iKSmJcePG0bNnT3r37s3UqVMpKSlh/PjxANxyyy00b96cKVOm4OPjQ5cuXWrtHxQUBFCz3svLi0suuYQHH3wQX19fWrZsyeLFi3nvvfd44YUXGvTaXJ3eSCkiIlI/NGPMXQVEwvhvISAKcrfDW8MhN9XoqjCbTfzruq74eJpZufsQs1anG12SiIiI2xg9ejTPP/88jz32GN27dyclJYX58+fXNORPT0/n4MGD53TM2bNn06tXL8aMGUNcXBz/+te/eOaZZ7j77rvr4xIapZLyKnZkOV5OlKDG+yIiInXKZLfbXb7LeWFhIVarlYKCAgIDA40ux7Xkp8P718ChVPALhT99ClEJRlfFzGV7ePrrLTTx9uCH+wcSFeRrdEkiItIIaQzhGtz9Pq3cdYib3/iFKKsPKyZfZnQ5IiIiLuFsxw+aMebugmJg/HxoFg+lufDOSNizxOiquLVvLBfFBFFcXsXf526iEeS3IiIiIuel5jFKzRYTERGpcwrGBJqEwbivIXYAVBTBB9fBlnmGlmQxm/j39d3wsphZtD2Huev3G1qPiIiIiFFSMg4D6i8mIiJSHxSMiYNPIIz5FDpeCdUV8Mk4WPeeoSW1DQ/gr0PaAfDkV1vILioztB4RERGRhma321mfng/ojZQiIiL1QcGYHOfpAze8CwljwW6DeZNg2VRDS7prYGs6RwVScKSSx7/cbGgtIiIiIg3tYEEZ2UXlWMwmuja3Gl2OiIhIo6NgTGqzeMBVL0O/+xzff3ocfngEDOrx5Wkx8+/ru+FhNvHdr5l8u+nc3oQlIiIi4sqO9RfrEBGAr5fF2GJEREQaIQVjcjKTCYY+CUOfdnxf8TJ8OQGqqwwpp3OUlXsGtQHgsS9/5XBJhSF1iIiIiDQ0Nd4XERGpXwrG5PT63QtXvwImC6R8CB+PhcojhpQy8dK2tAtvQm5xBU99vcWQGkREREQaWkpNf7EgQ+sQERFprBSMye9LGAOj3weLN2z/Fj64HsoKGrwMbw8L/76+G2YTzF2/n5+3ZTV4DSIiIiINqaraxqb9jnFXgoIxERGReqFgTM6s4xUw9nPwCoC9y+CdK6A4u8HLSIgJ5vb+rQD4++e/UlhW2eA1iIiIiDSU7VlFHKmsJsDbgzZhTYwuR0REpFFSMCZnJ7Y/jP8G/MMgcxO8NRwOpzV4GUlDOxDb1I/MwjKmfLu1wc8vIiIi0lCO9RfrFm3FbDYZW4yIiEgjpWBMzl6zeLjtewiKgbzdMHM4ZDVsvy9fLwv/uq4bALOSM1iemtug5xcRERFpKOovJiIiUv8UjMm5adoGbvsBwuOgOBPevhzSVzVoCRe3bsqfLo4B4OHPN1JaYczbMkVERETqU80bKaODjS1ERESkEVMwJucusBnc+g206O1oxP/e1bDzxwYt4eERnWge5EtG3hH+8/32Bj23iIiISH0rKqskNacY0IwxERGR+qRgTM6PXwjc8gW0HQpVR2DWTbDxkwY7fRNvD569tisA76xIY01aXoOdW0RERKS+bdxXgN0OzYN8CQvwNrocERGRRkvBmJw/L3+4eRZ0vQFsVfD5HbDqtQY7/SXtw7i+Rwvsdnjos42UVVY32LlFRERE6tOxxygTYoIMrUNERKSxUzAmF8biCde8Dr3vcnz/7iFY+CzY7Q1y+keviCMswJvdOSW8tGBng5xTREREpL6tV+N9ERGRBqFgTC6c2Qwj/g2D/u74vvg5+PYBsNX/DC6rnyf/HNUFgNeX7GbTvoJ6P6eIiIhIfbLb7ZoxJiIi0kAUjEndMJlg0P/BH54HTLD6TfjsDqiqqPdTD+8cyZXdmlFts/PgpxuoqLLV+zlFRERE6sv+/CPkFpfjYTbROcpqdDkiIiKNmoIxqVu974TrZ4LZEzZ/DrNGQ0VJvZ/2yas6E+znybbMIl5dtKvezyciIiJSX449RtmpWSA+nhZjixEREWnkFIxJ3etyHfxxNnj6wa6f4d2roLR+3xrZtIk3T1zVGYBpC3eydGdOvZ5PREREpL4ce4xS/cVERETq3zkHY0uWLGHkyJFERUVhMpn44osvfnf7ZcuW0a9fP5o2bYqvry8dO3bkxRdfPGm76dOnExsbi4+PD4mJiSQnJ59raeJM2g6BW+aBTxDsXwNvj4CC/fV6yqvio/hD10gqq+3c9s5qvtpwoF7PJyIiIlIfFIyJiIg0nHMOxkpKSoiPj2f69Olntb2/vz8TJ05kyZIlbN26lUceeYRHHnmE119/vWabOXPmkJSUxOOPP866deuIj49n+PDhZGdnn2t54kyie8Ft8yEgCnK2wVvDITe13k5nMpl4cXR3ruzWjMpqO/fOXs+7K9Lq7XwiIiIida2y2sav+x0vE+quxvsiIiL1zmS32+3nvbPJxNy5cxk1atQ57Xfttdfi7+/P+++/D0BiYiK9evVi2rRpANhsNqKjo5k0aRIPP/zwGY9XWFiI1WqloKCAwMDAc74OqWf56fD+NXAoFfxC4U+fQlRCvZ3OZrPz5FebeXflXgDuvawd9w9ph8lkqrdzioiIa9IYwjW4033atK+AkdOWEejjQcpjwzCbNX4RERE5H2c7fmjwHmPr169nxYoVXHLJJQBUVFSwdu1ahgwZcrwos5khQ4awcuXKUx6jvLycwsLCWos4saAYGD8fmsVDaS68MxL2LKm305nNJp64qjNJQ9sD8L8FO/nHF79SbTvvDFhERESkQaRkHAYgPjpIoZiIiEgDaLBgrEWLFnh7e9OzZ08mTJjAHXfcAUBubi7V1dVERETU2j4iIoLMzMxTHmvKlClYrdaaJTo6ut7rlwvUJAzGfQ2xA6CiCD64DrZ+VW+nM5lM3HtZO/45qgsmE3y0Kp2JH62jvKq63s4pIiIicqHWH+0vlqD+YiIiIg2iwYKxpUuXsmbNGmbMmMHUqVOZNWvWeR9r8uTJFBQU1CwZGRl1WKnUG59AGPMpdLwSqivg41tg3Xv1eso/XdyS6X+8CC+Lme9+zWT826spKqus13OKiIiInK+axvvqLyYiItIgGiwYa9WqFV27duXOO+/k/vvv54knngAgNDQUi8VCVlZWre2zsrKIjIw85bG8vb0JDAystYiL8PSBG96FhLFgt8G8SbBsar2e8g9dm/HO+F408fZgxa5D3PzGL+QUldfrOUVERETOVUFpJbtzSgCIbxFkbDEiIiJuosF7jIGjuX55uSOY8PLyokePHixYsKDWzxcsWECfPn2MKE/qm8UDrnoZ+t3n+P7T4/DDI3D+74E4o75tQ5l918U09ffi1/2F3DBjBRl5pfV2PhEREZFztWFfPgAxIX40beJtbDEiIiJu4pyDseLiYlJSUkhJSQFgz549pKSkkJ6eDjgec7zllltqtp8+fTpfffUVO3fuZOfOncycOZPnn3+eP/3pTzXbJCUl8cYbb/Duu++ydetW7rnnHkpKShg/fvwFXp44LZMJhj4JQ592fF/xMnw5Aaqr6u2UXZpb+fSevrQI9iXtUCnXvrqCrQf14gYRERFxDjWPUaq/mIiISIPxONcd1qxZw+DBg2u+JyUlATBu3DjeeecdDh48WBOSgWP21+TJk9mzZw8eHh60adOG5557jj//+c8124wePZqcnBwee+wxMjMz6d69O/Pnzz+pIb80Qv3uBb8QmHcvpHwIRw7D9W+Bp2+9nK5VqD+f3dOXcW8lsy2ziBtfW8nMcb3o3SqkXs4nIiIicrYUjImIiDQ8k91ej8+vNZDCwkKsVisFBQXqN+aqtn0Dn4yH6nJo2R9u/gh8rPV2uoIjldz57hqS0/Lw9jAz7Y8XMTROQayIiLvRGMI1uMN9stvt9PjnT+SVVPD5X/pyUUyw0SWJiIi4tLMdPxjSY0zkJB2vgLGfg1cA7F0G71wBxdn1djqrryfv3d6bIZ0iKK+y8ef31/Dxar3dVERERIyRkXeEvJIKvCxmOkc1zvBPRETEGSkYE+cR2x/GfwP+YZC5Cd4aDofT6u10Pp4WZvzpIm7o0QKbHR76bCOvLtpFI5hEKSIiIi5mfcZhADpFBeLtYTG4GhEREfehYEycS7N4uO17CIqBvN0wczhkbam303lYzPz7+m7cfUkbAJ6bv41nvtmKzaZwTERERBrOsf5iCeovJiIi0qAUjInzadoGbvsBwuOgOBPevhzSV9Xb6UwmEw+P6MgjV3QC4M1le/jbJxuorLbV2zlFRERETqTG+yIiIsZQMCbOKbAZ3PoNtOgNZQXw3tWw88d6PeUdA1rzwo3xeJhNzF2/nzvfW0NpRVW9nlNERESkvKqazfsLAQVjIiIiDU3BmDgvvxC45QtoOxSqjsCsm2DjJ/V6ymsvasEbt/TEx9PMou05jHlzFfmlFfV6ThEREXFvWw8WUVFtI9jPk5ZN/YwuR0RExK0oGBPn5uUPN8+CrjeArQo+vwNWvVavpxzcMZwP77gYq68n69PzuWHGSg4WHKnXc4qIiIj7Skl3NN6Pjw7CZDIZXI2IiIh7UTAmzs/iCde8Dr3vcnz/7iFY+CzU49sje7QM5pO7+xAZ6MPO7GKue2UFqdnF9XY+ERERcV/qLyYiImIcBWPiGsxmGPFvGPR3x/fFz8G3D4Ct/hrkt48I4LO/9KV1mD8HCsq4YcaKmoGriIiISF1RMCYiImIcBWPiOkwmGPR/8IfnAROsfhM+ux2q6q8HWPMgXz69uy/xLawcLq3kj2/8wpIdOfV2PhEREXEvh0sqSDtUCigYExERMYKCMXE9ve+E62eC2RM2fw6zRkNFSb2dLsTfi4/uvJgB7UIprajm9ndX82XK/no7n4iIiLiPlH35ALQK9SfIz8vYYkRERNyQgjFxTV2ugz/OBk8/2PUzvHsVlObV2+n8vT2YOa4XI+OjqKy2c9+cFN5ZvqfeziciIiLuISU9H9BsMREREaMoGBPX1XYI3DIPfIJg/xp4ewQUHqi303l5mHlpdHfG9WmJ3Q5PfLWF//6wHXs9vgRAREREGjf1FxMRETGWgjFxbdG94Lb5EBAFOdtg5jDITa2305nNJp64qjN/G9oegJd/TuXvc3+l2qZwTERERM6N3W5nw9FHKRWMiYiIGEPBmLi+8E5w+/fQtC0UZMBbw2DD7Hp7Y6XJZGLSZe149pqumE0wKzmdCR+uo6yyul7OJyIiIo1T2qFS8ksr8fIw06lZoNHliIiIuCUFY9I4BMXA+PnQrDuUHoK5f4aZQyAjud5O+cfEGF4ZcxFeFjPzN2dy69vJFJVV1tv5REREpHFJyTgMQOeoQLw8NCwXERExgv4FlsajSRjc9j0MeQK8msD+tTBzKHx2BxTsq5dTXt6lGe/c1osm3h78sjuPm17/hZyi8no5l4iIiDQuarwvIiJiPAVj0rh4+kD/+2HSOkj4E2CCTZ/Ayz1h0b+gorTOT9m3TSiz77qY0CZebD5QyPUzVpB+qO7PIyIiIo3Lscb7CTHBxhYiIiLixhSMSeMUEAFXT4e7FkJMH6g6AoumwLSesPETqOM3SXZpbuXTu/sSHeLL3kOlXDdjBVsOFNbpOURERKTxKKusZstBx1ghQTPGREREDKNgTBq3qAQY/x3c8A5YY6BwP3x+h+PtlfvX1umpYkP9+ezuvnRqFkhOUTmjX1vJqt2H6vQcIiIi0jhsOVhIZbWdpv5etAj2NbocERERt6VgTBo/kwk6XwMTk+HSR8DTH/YlwxuXwty7ofBgnZ0qPNCH2XddTO9WIRSVVzH2rWR+2JxZZ8cXERGRxmH9Cf3FTCaTscWIiIi4MQVj4j48fWHggzBpLcTf7Fi3YRa83AOW/Acqj9TJaay+nrx3W2+GxUVQUWXj7g/WMmd1ep0cW0RERBqHY/3F1HhfRETEWArGxP0ENoNrZsAdP0OL3lBZAj//E6b1hl8/r5P+Yz6eFl4ZcxGje0Zjs8P/fbaJVxalYq/j3mYiIiLimlIyDgPQPSbI2EJERETcnIIxcV8tesDtP8B1MyGwORSkw6fj4e0/wIGUCz68h8XMv67ryl8GtQHg3/O38/TXW7HZFI6JiIi4s0PF5WTkOWaqd2sRZGwxIiIibk7BmLg3kwm6Xg8T18CgyeDhC+kr4PVB8OUEKMq6wMObeOjyjjx6ZRwAby3fQ9LHKVRW2+qgeBEREXFFxx6jbBPmj9XX09hiRERE3JyCMREALz8Y9DBMWgNdbwDssP4DR/+xZS9CZdkFHf72/q2YOro7HmYTX6Qc4I5311BaUVU3tYuIiIhLOd5fLNjYQkRERETBmEgt1hZw3Ztw+4/QvAdUFMFPT8D03rBl3gX1HxuV0Jw3x/XE19PC4h05/PGNVRwuqai72kVERMQl1ARj6i8mIiJiOAVjIqcS3Rtu/wmueQ0CmkH+Xvh4LLw7EjI3nfdhB3UI58M7Ewny8yQlI58bXlvJgfy6eRumiIiIOD+bzV4TjCXojZQiIiKGUzAmcjpmM8Tf5Og/NvBB8PCBtKXw2kD46q9QnHNeh70oJphP7+5DM6sPqdnFXPfqClKzi+q4eBEREXFGu3NLKCqrwtvDTIfIAKPLERERcXsKxkTOxLsJXPoITFwNna8Fuw3WvgMvXwQrXoaqc38csm14AJ/e05c2Yf4cLCjj+hkrWZ9+uO5rFxEREadybLZY1+ZWPC0aiouIiBhN/xqLnK2gGLjhbRg/H5p1h/JC+OEReCURtn17zv3Hmgf58sndfekeHUR+aSV/fGMVi3ec3yw0ERERcQ0pGY5fhHXXY5QiIiJOQcGYyLlq2QfuXAhXT4cmEZC3G2bfDO+Pgqwt53SoEH8vPrwjkYHtwzhSWc3t76zmy5T99VO3iIiIGE6N90VERJyLgjGR82E2Q8KfYNJa6J8EFm/YvQhm9INv/gYlh876UP7eHrx5S0+uio+iymbnr7NTeHv5nvqrXURERAxRVlnNtoOOvqKaMSYiIuIcFIyJXAjvABjyOExMhk5XOfqPrX4TXk6Ala9AdeVZHcbLw8zU0d25tW8sAE9+tYXnv9+O/RwfzxQRERHn9ev+AqpsdsICvGke5Gt0OSIiIoKCMZG6ERwLo9+HcV9DRFcoK4DvJ8MrfWDHD2d1CLPZxOMj43hweAcApi1M5e9zN1FVbavHwkVERKSh1DxGGR2EyWQythgREREBFIyJ1K1WA+DPi2HkS+AXCod2wkc3wAfXQc72M+5uMpmYMLgt/7q2K2YTzErOYMJH6yirrG6A4kVERKQ+rT8hGBMRERHnoGBMpK6ZLdDjVrh3HfS9F8yekPqTY/bYd/8HpXlnPMRNvWN4ZUwPvDzMfL85i3FvJVNw5OweyxQRERHnlJKeD0CCgjERERGnoWBMpL74WGHY0zBhFXS4AuzVsGoGvHwRrHodqqt+d/fLu0Ty3m29CfD2YNWePEZMXcLC7dkNVLyIiIjUpeyiMvbnH8Fkgq4trEaXIyIiIkcpGBOpb03bwM0fwS1fQngcHDkM3z3oeINl6oLf3fXi1k2Z/eeLiQnx40BBGePfXs39c1LIK6looOJFRESkLhybLdYuvAkBPp7GFiMiIiI1FIyJNJTWg+DPS+GKF8A3BHK2wQfXwkejITf1tLt1jrIy/74B3NG/FWYTzF2/n6EvLOarDQf01koREREXkaL+YiIiIk5JwZhIQ7J4QK/b4d71cPEEMHvAjvnwSiLM/zscyT/lbn5eHjxyZRyf3dOX9hFNOFRSwaRZ67nzvbVkFpQ17DWIiIjIOTsejAUbW4iIiIjUomBMxAi+QXD5s/CXX6DdcLBVwS/THf3HVs8E26nfQpkQE8zXkwZw35B2eFpM/LQ1i6EvLGZWcrpmj4mIiDipapudjfsKAM0YExERcTYKxkSMFNoOxnwMf/oMQjtA6SH4JglmDIDdi0+5i5eHmfuGtOebewfQPTqIovIqJn++iT++sYq03JIGvgARERE5k105xRSXV+HraaF9RBOjyxEREZETKBgTcQZth8A9y2HEf8AnCLI3w3tXwewxkLf7lLu0jwjgs3v68uiVcfh6Wli5+xDDpy7h9SW7qKq2NWz9IiIiclrHGu93bWHFw6Lht4iIiDPRv8wizsLiCYl3OfqP9f4zmCyw7WuYngg/POoIyH7zuKTFbOL2/q34/r6B9GvblPIqG89+u41rX13B1oOFBl2IiIiInGj90f5iCXqMUkRExOkoGBNxNn4h8Id/wz0roM1lUF0BK/4H/0uA59s5ZpEtfwnSV0Glo/F+TFM/Prg9kX9f140AHw827itg5MvLeOGH7ZRXnbpfmYiIyKlMnz6d2NhYfHx8SExMJDk5+az2mz17NiaTiVGjRp30s61bt3LVVVdhtVrx9/enV69epKen13HlzktvpBQREXFeCsZEnFV4R0fvsT9+AjF9wOIFJTmOWWQ/PgZvDYN/RcObQ+H7f2Da+hU3dvTip6RLGBYXQZXNzv9+TuWK/y1j7d7DRl+NiIi4gDlz5pCUlMTjjz/OunXriI+PZ/jw4WRnZ//ufmlpaTzwwAMMGDDgpJ/t2rWL/v3707FjRxYtWsTGjRt59NFH8fHxqa/LcCqlFVVsz3TM4u4eE2RsMSIiInISk70RvMqusLAQq9VKQUEBgYGBRpcjUj8qy+DgBshYdXwpyTl5u+BY7NG92WzuxDObAlhVEondZObWvrE8MKwD/t4eDV+7iIiT0hiitsTERHr16sW0adMAsNlsREdHM2nSJB5++OFT7lNdXc3AgQO57bbbWLp0Kfn5+XzxxRc1P7/pppvw9PTk/fffP++6XPk+rdp9iNGv/0JEoDer/j7E6HJERETcxtmOH/RfyCKuwtMHYhIdCzj6jR3eAxnJR4OyZMjaDIfTMB1OowswCyjz8yO5sg3rVrXjkY1duf7qUfTr0trIKxERESdUUVHB2rVrmTx5cs06s9nMkCFDWLly5Wn3e+qppwgPD+f2229n6dKltX5ms9n45ptveOihhxg+fDjr16+nVatWTJ48+ZSPXB5TXl5OeXl5zffCQtftm6nHKEVERJybgjERV2UyQUhrxxJ/k2NdWQHsW3M8LNu3Bp+KIgZaNjGQTVD5ObZPnuLAV61p2mkA3q36QHRvCG7lOJ6IiLit3NxcqquriYiIqLU+IiKCbdu2nXKfZcuWMXPmTFJSUk758+zsbIqLi/nXv/7FP//5T5577jnmz5/Ptddey8KFC7nkkktOud+UKVN48sknL+h6nMXxYCzY2EJERETklBSMiTQmPlZoe5ljAbBVQ/YWyFhFVdovFO5cTkjFAaLKd0HKLkh5x7Gdf7gjIItOdCxR3cHD26irEBERF1BUVMTYsWN54403CA0NPeU2NpsNgKuvvpr7778fgO7du7NixQpmzJhx2mBs8uTJJCUl1XwvLCwkOjq6jq+gYRwLxhLUX0xERMQpKRgTaczMFojsCpFd8eh1ByHAhq3b+fzLz2levIke5h10M6fhWZLtaOq/7WvHfhYviEqoHZY1CTf0UkREpH6FhoZisVjIysqqtT4rK4vIyMiTtt+1axdpaWmMHDmyZt2xIMzDw4Pt27cTHR2Nh4cHcXFxtfbt1KkTy5YtO20t3t7eeHu7/i9oMgvKOFhQhtkEXZtbjS5HRERETkHBmIibie/UgY7tHmL6z6mMXrQLi62c3j4ZPNDpMN3s2zFlJDua+h9r8M/Ljh2DWx0NyY6GZeGdHMGbiIg0Cl5eXvTo0YMFCxbU9P+y2WwsWLCAiRMnnrR9x44d2bRpU611jzzyCEVFRbz00ktER0fj5eVFr1692L59e63tduzYQcuWLevtWpxFSobjrdDtIwL08hsREREnpX+hRdyQt4eFpGEdGNG1GQ99upGl+71Yuh76t72cKbd1IdqU5ehTlv6L48/sLY5G/4f3wMbZRw8SCC16Hg/LmvcEH9d6U5iIiNSWlJTEuHHj6NmzJ71792bq1KmUlJQwfvx4AG655RaaN2/OlClT8PHxoUuXLrX2DwoKAqi1/sEHH2T06NEMHDiQwYMHM3/+fL766isWLVrUUJdlmPV6jFJERMTpKRgTcWOdmgUy9y99eWv5Hv77ww6WpeYybOpSHhjegVv7jsZyUlP/VTVN/SkvhF0/OxYATBDR+fijl9G9IThWTf1FRFzI6NGjycnJ4bHHHiMzM5Pu3bszf/78mob86enpmM3mczrmNddcw4wZM5gyZQr33nsvHTp04LPPPqN///71cQlOJSU9H9AbKUVERJyZyW63240u4kIVFhZitVopKCggMFAzVkTOR1puCf/32UZW7ckDHIP4f1/fjfYRASdvfEJTf9KPhmX5e0/e7lhT/5iLHWFZs3g19RcRp6IxhGtwxftUbbPT9YnvKa2o5vv7BtIh8hT/noqIiEi9Odvxg4IxEalhs9mZvTqDKd9upai8Ck+LiYmD23HPoDZ4eZxhhkBRpuOxy2Ozyg6kgK2y9ja1mvpfDC37gl9IvV2PiMiZaAzhGlzxPm09WMiIl5bi72Vh4xPDsZg1g1pERKQhne34QY9SikgNs9nEHxNjGNwxjEfm/sqCbdm8+NMOvt10kOeu7/b7j4IERELcVY4FoLIMDqYcDcqO9isrza3d1N/iBXFXQ8/bIKaPHrsUEZFGI+Vof7FuLYIUiomIiDgxBWMicpJmVl/eHNeTrzYe5Il5m9meVcS1ryzntn6t+NuwDvh6ncXbKD19HI9Qxlzs+G63Q97u47PK0ldCzjbY9IljCevkCMjiR4OPXmkvIiKuraa/mBrvi4iIOLVz654qIm7DZDJxVXwUPyVdwqjuUdjs8OayPQyfuoQVqbnnc0Bo2ga63wwjp8KEVXDnQrjoFvD0g5yt8N2D8N+O8OVE2L+uzq9JRESkoRybMabG+yIiIs5NwZiI/K4Qfy+m3pTA27f2opnVh/S8Uv745ioe/mwjBUcqz3yA39P8IrjqZfjbNvjD845ZY5WlsP59eGMwvHYJrHsPKkrq5mJEREQaQHF5FTuyiwBIUDAmIiLi1BSMichZGdwxnB/uH8jYi1sCMHt1BkNfWMwPmzMv/OA+Vuh9J/xlJdz2PXS90dF/7GAKzJvkmEX27YOQteXCzyUiIlLPNu7Lx26HKKsP4YE+RpcjIiIiv0PBmIictQAfT54e1YWP/9yH1qH+ZBeVc9f7a5nw0Tpyisov/AQmk6Mn2XVvQNI2GPo0BLeC8kJIfh1e7QNvXQ4bP4aqOjifiIhIPah5jFL9xURERJyegjEROWe9W4Xw7V8H8JdBbbCYTXyz8SBDX1zM5+v2Ybfb6+Yk/k2h370waR2M/QI6jQSTxdG0//M74YVO8MOjcGhX3ZxPRESkjtQ03tdjlCIiIk5PwZiInBcfTwsPXd6RLyf0I65ZIPmllSR9vIFb317NvsOldXcisxnaDIbRH8D9m2HwPyCwOZQeghX/g5cvgvdGwZZ5UH2BPc9EREQukN1uP6HxfrCxxYiIiMgZKRgTkQvSpbmVLyf246HLO+DlYWbxjhyGv7iE91amYbPV0eyxYwKbwSUPwV83ws2zoe1QwAS7F8LHY2FqV1j4LBTsq9vzioiInKWDBWVkF5VjMZvo2txqdDkiIiJyBgrGROSCeVrM/GVQW7776wB6xQZTUlHNY19u5sbXVpKaXVz3J7R4QIcR8KdP4a8p0D8J/MOg6CAsfs4RkM26GXb+CLbquj+/iIjIaRybLdYhIgBfL4uxxYiIiMgZKRgTkTrTJqwJc+7qw9NXd8bfy8KavYf5w0tLmb4wlcpqW/2cNDgWhjwO92+B69+G2AFgt8H2b+HD6+F/3WHpf6E4u37OLyIicoJjwViCGu+LiIi4BAVjIlKnzGYTY/vE8kPSJQzqEEZFtY3/fL+dq6YtZ9O+gvo7sYcXdLkWbv0aJqyGi/8CPlbIT4cFT8ELcfDJeNizFOrqBQEiIiK/ocb7IiIirkXBmIjUi+ZBvrx9ay9eHB1PsJ8nWw8WMuqV5Uz5bitllfX8eGNYe7h8CvxtO4x6FVr0AlslbP4c3r0SpvWCla/AkcP1W4eIiLiVymobG/fnA5oxJiIi4ioUjIlIvTGZTFyT0IIfky5hZHwU1TY7ry3ezYiXlvLL7kP1X4CnL3T/I9zxE/x5CfQYD57+cGgnfD8Z/tsRvvgL7FujWWQiInLBtmcWUVZpI8DHg9ahTYwuR0RERM6CgjERqXehTbx5+eYE3rilJxGB3uzJLeGm13/hoU83kJFX2jBFNIuHkVPhb9vgihcgogtUlUHKh/DmZfDaAFjzFpQXNUw9IiLS6BzrLxbfIgiz2WRsMSIiInJWFIyJSIMZGhfBj0mXcHPvGAA+XrOPwc8v4sFPNrAnt6RhivAJhF63w93L4PYfIf5msHhD5ib4+n74byf4Ogkyf22YekREpNE4Foypv5iIiIjrUDAmIg0q0MeTKdd25dO7+zCgXShVNjufrN3HZf9dxF9nr2dHVgPN2DKZILo3XDPDMYts+LPQtC1UFMGamTCjH7w5FFJmQeWRhqlJRERcmoIxERER13POwdiSJUsYOXIkUVFRmEwmvvjii9/d/vPPP2fo0KGEhYURGBhInz59+P7772tt88QTT2AymWotHTt2PNfSRMSF9IwN4f3bE5n7l74M6RSOzQ5fphxg2ItLuPv9tfy6vx7fYPlbfiHQZwJMXAO3zIO4UWD2gH3J8MXd8EIn+P4fkJvacDWJiIhLKSyrZFdOMQDd1XhfRETEZZxzMFZSUkJ8fDzTp08/q+2XLFnC0KFD+fbbb1m7di2DBw9m5MiRrF+/vtZ2nTt35uDBgzXLsmXLzrU0EXFBCTHBvDmuF9/c258/dI3EZIL5mzO58uVl3PbOatalN+CbI00maH0J3Pgu3L8FLn0UrDGOt1eunAbTesC7I2HzXKiqaLi6RETE6W3MKMBuhxbBvoQ28Ta6HBERETlLHue6w4gRIxgxYsRZbz916tRa35999lm+/PJLvvrqKxISEo4X4uFBZGTkuZYjIo1E5ygrr4zpwc6sIqYvTGXehgP8vC2bn7dl069tUyZd2o7EViGYTA3UzDggAgY+AP3vh9QFjscrd3wPe5Y4Fv9wuOgW6DEOgmIapiYREXFaKRmOX+ToMUoRERHX0uA9xmw2G0VFRYSEhNRav3PnTqKiomjdujVjxowhPT39tMcoLy+nsLCw1iIijUO7iACm3pTAz38bxI09W+BhNrE89RA3vf4LN762ksU7crDb7Q1XkNkC7YfBH+fAfRth4IPQJAJKsmHp8zC1G3x4I2yfD7bqhqtLREScivqLiYiIuKYGD8aef/55iouLufHGG2vWJSYm8s477zB//nxeffVV9uzZw4ABAygqOnUT7ilTpmC1WmuW6OjohipfRBpIbKg//74+nkUPDmLsxS3xsphZnXaYcW8lM2r6cn7cktWwARk4ZoZd+gjcvxlufA9aXQLYYef3MGs0vBQPC5+FrV9D1maoaKA3bYqIiKHsdntNMJag/mIiIiIuxWS/gP+yNJlMzJ07l1GjRp3V9h999BF33nknX375JUOGDDntdvn5+bRs2ZIXXniB22+//aSfl5eXU15eXvO9sLCQ6OhoCgoKCAwMPOfrEBHnl1VYxutLdvPhqr2UVdoA6BgZwKRL23F5l0gs5gZ6xPK3clNh7duQ8qGjF9lvNYmA4FYQ0gqCY0/43Ar8Qx19zUTEMIWFhVitVo0hnJyz36eMvFIG/HshHmYTvz45HB9Pi9EliYiIuL2zHT+cc4+x8zV79mzuuOMOPvnkk98NxQCCgoJo3749qamnfgOct7c33t5qairiTiICfXj0yjjuGdSGmcv28N6KNLZlFjHho3W0CfNn4qVtGdktCg9LA0+EDW0Lw59xNOrf8oWjD9nhPZC3B8ryoTjLsWT8cvK+Xk2OBmWxJ4dm1miwNNhf0SIicgGOzRbr1CxQoZiIiIiLaZD/6po1axa33XYbs2fP5oorrjjj9sXFxezatYuxY8c2QHUi4kpCm3jzf5d35M8DW/POijTeWraHXTkl3D9nAy/+uJO/DGrDtRe1wMujgQMyTx+Iv8mxHHPksCMgOxaUHd4DeWlwOA0K90NFMWRtciy/ZfZwhGPHgrLg2NqfvZs0zHWJiMgZqb+YiIiI6zrnYKy4uLjWTK49e/aQkpJCSEgIMTExTJ48mf379/Pee+8Bjscnx40bx0svvURiYiKZmZkA+Pr6YrVaAXjggQcYOXIkLVu25MCBAzz++ONYLBZuvvnmurhGEWmEgvy8uG9Ie27v34r3f9nLm0v3kJ5XysOfb+J/C3Zy96A23Ngz2tjf3PsGQ/NgaH7RyT+rLIP89N+EZnscodnhNKgud6w7vOfUx/YPP3VoFtIK/MP0iKaISANSMCYiIuK6zrnH2KJFixg8ePBJ68eNG8c777zDrbfeSlpaGosWLQJg0KBBLF68+LTbA9x0000sWbKEQ4cOERYWRv/+/XnmmWdo06bNWdXk7H0nRKT+lVZU8dGqdF5fspvsIkcPwrAAb/48sDV/TIzBz8uFHku02aDo4GlCsz2n7mV2Iq8mRx/NjD25t5k1Giye9X8NIi5CYwjX4Mz3qbLaRpfHv6e8ysbPf7uE1mGa0SsiIuIMznb8cEHN952FMw+WRKRhlVVW88maDGYs3s3+/CMAhPh7cXv/VtzSpyUBPo0gFDqSf/qZZgX7gN/5a91kgaDo078QQI9oipvRGMI1OPN92rSvgJHTlmH19STlsaGYNGNXRETEKThd830RkYbg42lhbJ9YRveK4Yv1+5m+KJW9h0r5z/fbeW3xLm7t14rb+sUS5OdldKnnzzcIfBMgKuHkn1WVOx7RPNVMs8NpUFV2PETbvfDk/f3DTh2ahbYHv5D6vCoREZe0PsMxizc+OkihmIiIiAtSMCYijZKXh5kbe0Vz7UXN+XrjQaYtTCU1u5j/LdjJzKW7GdsnljsGtCK0SSN7w62HN4S2cyy/ZbNBceapQ7O8PXAkD0pyHMu+5JP3D2gG4XEQEQfhnR1/hnZwvHhARMRNpaTnA+ovJiIi4qoUjIlIo+ZhMTMqoTlXxUfx/eZMXv45lS0HC5mxeBfvrNjDH3u35K6BrYm0ukG4YzZDYJRjie138s/LCk4fmhVkOPqeFR2EXQuO72OyQNM2RwOzzseDs6BYx/lERBq5Y433ExSMiYiIuCQFYyLiFsxmEyO6NuPyLpH8vC2b//2cyoaMfN5avocPftnLDT1bcPclbYgO8TO6VOP4WCGqu2P5rbJCyN4K2Zshawtkb4GszVCWD7k7HMuWL45v7+kP4R1/E5h1Bv/QhrkWEZEGUFBaye7cEsDxKKWIiIi4HgVjIuJWTCYTl3WK4NKO4SxLzeXln1NJ3pPHh6vSmbM6g1EJzZkwuC2tQv2NLtW5+ARCTKJjOcZud8wgy9pyQmC2GXJ2QGUJ7F/rWE7kH177UczwOAjrCF5uHEiKiMtK2ZcPQMumfoT4u3DvShERETemYExE3JLJZGJAuzAGtAtj1e5DTFuYytKduXy6dh+fr9vHld2imHhpW9pHBBhdqvMymY4/mtluyPH11VWQt8sxoyx7y/HA7HAalGTD7mzYveiE45gdTf5rBWadHU3/zZaGvioRkbOm/mIiIiKuT8GYiLi9xNZNSWzdlPXph5m+MJWftmYzb8MB5m04wOWdI5l4aVu6NLcaXabrsHhAWAfHwrXH15cXQ862EwKzo3+WHnIEaXm7YOtXx7f38HUc48TeZeGdoUm4I5QTETFYytE3UioYExERcV0KxkREjkqICebNcb3YfKCA6QtT+e7XTOZvdiyXdgxn4qVtuSgm2OgyXZd3E2jR07EcY7dDcfbJvctytkHVETiY4lhO5Nf05N5lYR0dxxcRaSB2u72m8b6CMREREdelYExE5Dc6R1l5ZUwPdmYVMX1hKvM2HODnbdn8vC2bfm2bMunSdiS2CsGkWUsXzmSCgAjH0ubS4+tt1Y63YZ7YuyxrC+TtdswwS1vqWI4fCIJb1u5dFtEZQto4ZrCJiNSx9LxSDpdW4mUxExcVaHQ5IiIicp70XwsiIqfRLiKAqTclcN+Q9ryyKJXP1+1neeohlqceoldsMBMvbcfAdqEKyOqD2QKhbR1L3NXH11eUOmaTndi7LGuLo3fZ4TTHsv2b49tbvCGs/fHALKKz43NApB7HFJELcmy2WKeoQLw91A9RRETEVSkYExE5g9hQf/59fTz3XtaO1xbvZs7qDFanHWbcW8nEt7Ay8dJ2DOkUroCsIXj5QfOLHMuJSnJP7l2WvRUqSyFzk2M5kW8wNG0L/mHgHwp+occ/n/jdryl46E1zInKy9Ucb7yfoMUoRERGXpmBMROQstQj24+lRXZh4aVteX7KbD1ftZcO+Au58bw0dIwOYdGk7Lu8SicWsgKzB+YdC60scyzE2Gxzec/LssrxdcOQw7Ft9dsf2sZ4+ODtVkKZHN0XcgvqLiYiINA4mu91uN7qIC1VYWIjVaqWgoIDAQPV4EJGGkVtczsxle3hvRRolFdUAtAnz508Xt+SahOYE+WmmkVOqPAI52yE/HUpzHbPNSnKhJKf299JcsNvO/fi+wScEZ01/P1TzDVGQZjCNIVyDs92n8qpquj7+AxXVNhY9MIjYUH+jSxIREZHfONvxg4IxEZELlF9awTsr0nhr2R4Ky6oA8PIw84cukdzUO0aN+l2VzQZl+Y7A7FTBWUmO40UAx35eegg4139STY4g7Wxmo/mHOrY1q5dRXdIYwjU4231Kychn1PTlBPt5su7Rofo7XkRExAmd7fhBv6YWEblAQX5e3DekPbf3b8Xc9fuZlZzB1oOFfJFygC9SDtA61J/RvaK5rkcLQpt4G12unC2zGfxCHEtYhzNvb6t2PKJZK0g7dPrvR/IAu+PPI3mQu/3M5zCZHbPMThmcNYUmEdC8BwRGXfDli8jppaQfBiA+OkihmIiIiItTMCYiUkcCfDy5pU8sYy9uycZ9Bcxenc68lAPszi1hynfbeP6H7QyNi+CmXjH0bxuKWb3IGhez5XhYdTaqqxyB2Glno/3me1m+49HO0qOPeeb8zrFDWkNsf2jZH2L7gbVFXVyhiBx1rL9YQnSwsYWIiIjIBVMwJiJSx0wmE/HRQcRHB/HIFXF8teEAs1dnkJKRz7ebMvl2UybNg3wZ3SuaG3tGE2n1MbpkMYLFA5qEO5azUV15dMbZ78xGy9/reCtn3m7Hsu49x77BsUdDsqNBWVBMvV2WiDtYf6zxfkyQoXWIiIjIhVOPMRGRBrL1YCFzVmfw+bp9Nb3IzCYY3CGcm3rHMLhDGB4Ws8FVissrK4D0XyBtKaQth4MpJ79EICjmN0FZS3DTx8E0hnANznSf8koquOjpHwHY8NgwrH6ehtYjIiIip6bm+yIiTqqssprvfj3IrOQMkvfk1ayPCPTmhh7RjO4VTXSIn4EVSqNSVggZq44HZQfWg7269jbWaGjZ73hQFtzKbYIyjSFcgzPdp4Xbshn/zmpah/rz8wODDK1FRERETk/N90VEnJSPp4VrElpwTUILduUUM2d1Bp+t3UdWYTnTFqYybWEqA9qFclOvGIbGReDloVlkcgF8AqHdUMcCUF50NChbDmnL4MA6KMiAjbMdC0BA1PGQLHaAo2eZmwRlImdS8xhldJChdYiIiEjdUDAmImKgNmFN+PsfOvHAsA78uCWL2avTWZaay9KdjiXE34vrLmrOTb1jaBPWxOhypTHwDoC2QxwLQEVJ7aBs/1ooOgCbPnYsAE0iawdlTdsqKBO3laL+YiIiIo2KHqUUEXEyGXmlfLwmg4/XZJBVWF6zvndsCDf1juYPXZvh42kxsEJp1CpKYd9qR0i2d7njc3VF7W38w4+GZEfffBnWwWWDMo0hXIOz3Ce73U73p36k4Egl8yb2o1uLIMNqERERkd+nHmMiIi6uqtrGou05zF6dzs/bsrEd/ds60MeDaxIcs8g6NdPfeVLPKo/AvjXHg7KMZKgur72Nfxi07OuYTdayH4R1BLNrPAKsMYRrcJb7tDunmEv/uxgvDzO/PjFcj7qLiIg4MfUYExFxcR4WM0PiIhgSF0FmQRmfrMlgzpoM9h0+wrsr9/Luyr3ERwdxc69oRsZH4e+tv9KlHnj6QqsBjgWgsszxuOXe5Y6G/hmroSQHtnzpWAD8mjqCsmNvvgyPc5mgTOT3HHuMsktUoEIxERGRRkIzxkREXIjNZmdZai5zVmfww5ZMKqsdf4X7e1kYGR/FTb1jiG9hxeSij7WJC6oqh/3rYO8yR5+yjFVQWVp7G99gx0yyY2++jOjiNEGZxhCuwVnu02Nf/sp7K/dyW79WPDYyzrA6RERE5Mw0Y0xEpBEym00MbB/GwPZh5BaX8/m6fcxOzmB3bgmzV2cwe3UGHSMDuLl3DKO6N8fq52l0ydLYeXhDyz6OZeCDUFUBB1Mcs8nSlkP6L3DkMGz72rEA+FhrB2WRXcGsvnni/NR4X0REpPHRjDERERdnt9tJ3pPH7NUZfLvpIOVVNgC8Pcxc0bUZN/WOoVdssGaRiTGqK+HgBkePsrRljqCsoqj2Nt7Wo+FaP0dT/8h4sDTM7+40hnANznCfyiqr6frE91RW21n60GCiQ/wMqUNERETOjprvi4i4oYLSSuau38fs1RlsyzwePrQO8+emXtFcd1ELmjbxNrBCcXvVVZC5wTGbLG0ZpK+E8sLa23gFQMzFjtlksf2hWTxY6mf2o8YQrsEZ7tPavYe57tUVNPX3Ys0jQ/TLBhERESenYExExI3Z7XZSMvKZszqDeRsOUFpRDYCnxcSwuEhu6h1NvzahmM36DzsxmK0aMjc6grK9R5eygtrbeFvhge2OFwHUMY0hXIMz3KeZy/bw9NdbuKxjODNv7WVIDSIiInL21GNMRMSNmUwmEmKCSYgJ5pEr4/hqwwFmJ6ezYV8B32w6yDebDhId4svontHc0DOaiEAfo0sWd2W2QFSCY+k70RGUZW12zCY7FpQFxdRLKCZyLmr6i0UHGVqHiIiI1C0FYyIijVwTbw9u7h3Dzb1j2HKgkNmr05m7fj8ZeUd4/ocdvPjTTgZ3COfm3tFc0j4MD4tzvC1Q3JTZAs26OZY+fwGbDUpzja5KhJSMw4Aa74uIiDQ2CsZERNxIXFQgT13dhckjOvHtpoPMWZ1BcloeP23N4qetWUQG+nBjzxbc0DNajaXFOZjN0CTc6CrEzeUWl5ORdwSAbi2CjC1GRERE6pSCMRERN+TrZeG6Hi24rkcLUrOLmbM6nc/W7SezsIz//ZzKywtT6d82lJt7xzCkUwReHppFJiLuKyU9H4C24U2w+tbPiyBERETEGArGRETcXNvwJvzjijgeGN6BH7dkMTs5g2WpuSzd6VhCm3gxrHMkA9qG0rdNKFY//UehiLgX9RcTERFpvBSMiYgIAN4eFq7sFsWV3aJIP1TKnDXpfLJmH9lF5Xy0Kp2PVqVjNkHXFkEMaBvKgHahJMQEazaZiDR6CsZEREQaLwVjIiJykpimfjw4vCP3D2nP0p25LN6Rw7LUXFKzi9mQkc+GjHymLUzFz8vCxa2b0v9oUNY2vAkmk8no8kVE6ozNZmeDgjEREZFGS8GYiIiclofFzOCO4Qzu6Gh+frDgCEt35rJsZy7LU3M5VFLBz9uy+XlbNgCRgT70OxqS9WsbSliAt5Hli4hcsN25xRSVV+HjaaZjZIDR5YiIiEgdUzAmIiJnrZnVlxt7RnNjz2hsNjtbMwtZtjOXZam5JO/JI7OwjM/W7eOzdfsA6BgZwMD2YfRvG0rvViH4eFoMvgIRkXOz/mjj/a7NrXhY9Oi4iIhIY6NgTEREzovZbKJzlJXOUVb+fEkbyiqrWZN2mKWpOSzdkcuWg4VsyyxiW2YRry/ZjZeHmV6xwfRvG8aAdqHENQvEbNZjlyLi3NRfTEREpHFTMCYiInXCx9NC/3ah9G8XyuQRkFtczvLU3JoZZQcLylieeojlqYd4bj6E+HvRt01TBrQLpX+7MJoH+Rp9CSIiJzkejAUbW4iIiIjUCwVjIiJSL0KbeHN19+Zc3b05drudXTklLNvpaOK/ctch8koq+HrjQb7eeBCA1qH+NSHZxa1DCPDxNPgKRMTdHamoZltmEQDdY4KMLUZERETqhYIxERGpdyaTibbhTWgb3oRb+7WistpGSkY+S3fksDQ1lw0Z+ezOLWF3bgnvrtyLxWwiITqI/u0cjfzjWwSpt4+INLhfDxRQbbMTFuBNlNXH6HJERESkHigYExGRBudpMdMrNoResSEkDetAwZFKVu46xLLUHJbtzCXtUClr9h5mzd7DTP1pJwHeHlx87LHLtqG0CvXHZFJ/MhGpXylHG+93jw7S3zkiIiKNlIIxERExnNXXk8u7RHJ5l0gAMvJKWXZCf7KCI5X8uCWLH7dkAdA8yJf+bUMZ0D6Ufm1CCfb3MrJ8EWmk1HhfRESk8VMwJiIiTic6xI+be8dwc+8Yqm12ft1fwLLUXJbuzGHt3sPszz/CnDUZzFmTgckEXaKsjscu24bSIzYYbw+L0ZcgIo3AsWAsQcGYiIhIo6VgTEREnJrFbCI+Ooj46CAmDG5LaUUVq/bkOWaT7cxle1YRm/YXsGl/Aa8u2oWPp5nerZoyoK3jDZkdIwP0CJSInLPsojL25x/BZIKuLaxGlyMiIiL1RMGYiIi4FD8vDwZ3CGdwh3AAsgvLjs4mczx2mVNUzpIdOSzZkQM43o55rDdZ/3ahRASqgbaInNmx/mLtwpvoLbkiIiKNmF7xJSIiLi080IdrL2rBi6O7k/z3y5h/3wAeuaITl7QPw8fTTG5xOXPX7+dvn2wg8dkFDHtxMU99tYVF27Mpr6o2unwRpzN9+nRiY2Px8fEhMTGR5OTks9pv9uzZmEwmRo0addpt7r77bkwmE1OnTq2bYuuR+ouJiIi4B80YExGRRsNkMtExMpCOkYHcMaA15VXVrN17uKaJ/6b9BezIKmZHVjFvLd+Dv5eFge3DGBoXwaUdwwnyUxN/cW9z5swhKSmJGTNmkJiYyNSpUxk+fDjbt28nPDz8tPulpaXxwAMPMGDAgNNuM3fuXH755ReioqLqo/Q6V9NfLCbY2EJERESkXikYExGRRsvbw0LfNqH0bRPKQ8DhkgpW7DrE0p05LNyeTVZhOd/9msl3v2ZiMZvo2TKYoXERDIuLJKapn9HlizS4F154gTvvvJPx48cDMGPGDL755hveeustHn744VPuU11dzZgxY3jyySdZunQp+fn5J22zf/9+Jk2axPfff88VV1xxxjrKy8spLy+v+V5YWHh+F3Seqm12NmjGmIiIiFtQMCYiIm4j2N+LK7o144puzbDZ7GzaX8BPW7P4cUsW2zKLWLUnj1V78vjnN1tpH9GEoXERDI2LpFtzK2azGvhL41ZRUcHatWuZPHlyzTqz2cyQIUNYuXLlafd76qmnCA8P5/bbb2fp0qUn/dxmszF27FgefPBBOnfufFa1TJkyhSeffPLcL6KOpGYXU1JRjZ+XhfYRAYbVISIiIvVPwZiIiLgl8wlvu/zbsA6kHyqtCcmS0/JqHrmcvnAX4QHeXNYpgmFxEfRp0xQfT4vR5YvUudzcXKqrq4mIiKi1PiIigm3btp1yn2XLljFz5kxSUlJOe9znnnsODw8P7r333rOuZfLkySQlJdV8LywsJDo6+qz3v1ApGYcB6NrcikWhuIiISKOmYExERASIaerHbf1bcVv/VuSXVrBoew4/bsli0fZssovKmZWczqzkdPy8LAxsd7wvWbC/+pKJeyoqKmLs2LG88cYbhIaGnnKbtWvX8tJLL7Fu3TpMprMPmLy9vfH29q6rUs9ZTeP9mCDDahAREZGGoWBMRETkN4L8vBiV0JxRCc0pr6rml915/Lglk5+2ZJNZWMb8zZnM35yJ2QQ9Y0MYFhfBkE4RxIb6G126yHkLDQ3FYrGQlZVVa31WVhaRkZEnbb9r1y7S0tIYOXJkzTqbzQaAh4cH27dvZ+nSpWRnZxMTE1OzTXV1NX/729+YOnUqaWlp9XMxF2h9ej4ACeovJiIi0ugpGBMREfkd3h4WLmkfxiXtw3j6aju/7i/kxy2Z/HC0L1nynjySj/Ylaxfu6Es2JC6C7i2C1JdMXIqXlxc9evRgwYIFjBo1CnAEXQsWLGDixIknbd+xY0c2bdpUa90jjzxCUVERL730EtHR0YwdO5YhQ4bU2mb48OGMHTu2psG/sykpr2JHVhEA3aP1RkoREZHGTsGYiIjIWTKZTHRtYaVrCytJwzqQkXe8L9mqPXnszC5mZ3YxryzaRViAN0M6hTOkUwT92oaqL5m4hKSkJMaNG0fPnj3p3bs3U6dOpaSkpCbEuuWWW2jevDlTpkzBx8eHLl261No/KCgIoGZ906ZNadq0aa1tPD09iYyMpEOHDvV/Qedh0/4CbHaIDPQh0upjdDkiIiJSzxSMiYiInKfoED/G92vF+H6tKCitZNGObH7YksXi7TnkFJUzKzmDWckZ+HpaGNg+lKFxkVzaMZwQ9SUTJzV69GhycnJ47LHHyMzMpHv37syfP7+mIX96ejpms9ngKutXTX8xPUYpIiLiFkx2u91udBEXqrCwEKvVSkFBAYGBgUaXIyIibq68qppVu/P4cUsWP23N4mBBWc3PzCbo2TKk5pHLVupLZiiNIVxDQ96nu99fy/zNmTw8oiN3X9KmXs8lIiIi9edsxw+aMSYiIlLHvD0sDGwfxsD2YTx1dWc2Hyjkhy2ORy63HiwkOS2P5LQ8nvl2K22P9SXrFEFCtPqSiRhNM8ZERETci4IxERGRemQymejS3EqX5laShrZn3+FSftqSxY9bs1i1O4/U7GJSs4t5ddEuQpsc70vWv536kok0tMyCMjILyzCboGtzq9HliIiISANQMCYiItKAWgT7cWu/VtzarxUFRypZtD2bH4/2JcstLmf26gxmr3b0JRvQLpQhcRFc1jGcpk28jS5dpNFLyTgMQPuIAPy9NUwWERFxB/oXX0RExCBWX0+u7t6cq7s3p6LKxqo9hxx9ybZkcaCgjB+2ZPHDlizMJujRMpghnSIYGhdB67AmRpcu0iitP/oYZUJMkKF1iIiISMNRMCYiIuIEvDzMDGgXxoB2YTx5laMv2bHm/ZsPFLI67TCr0w4z5btttAnzZ0hcBMPiIugeHYxFfclE6kRKej6g/mIiIiLuRMGYiIiIkzmxL9n9Q9uzP/8IPx0NyVbuOsSunBJ2Ld7Na4t3E9rEi0s7hjM0LpL+bUPx9VJfMpHzUW2zs2l/AQDdo4MNrkZEREQaioIxERERJ9c8yJdxfWMZ1zeWwrJKFm3P4actWSzcnk1ucQUfr9nHx2v24e1hplOzQDpHBRIXFUjnKCsdIwPUxF/kLOzIKqK0ohp/Lwttw/W4soiIiLtQMCYiIuJCAn08uSo+iqvio6iospG8J4+ftmbx45Ys9ucfISUjn5SjfZIAzCZoE9akVlgW1yyQYH8v4y5CxAmtP/oYZXx0kB5PFhERcSMKxkRERFyUl4eZ/u1C6d8ulMdHxrE7t4TNBwrZfKCALQcK2XygkLySCnZmF7Mzu5gvUg7U7Btl9SEuyno0LHMszYN8MZkUCIh7OvZGSvUXExERcS8KxkRERBoBk8lEm7AmtAlrwlXxUQDY7XayCstrBWVbDhaSnlfKgYIyDhSU8dPWrJpjWH09iWsWeEJYZqVNmD8eFrNRlyXSYI7NtFQwJiIi4l4UjImIiDRSJpOJSKsPkVYfLusUUbO+sKySrUeDsmNh2c6sIgqOVLJy9yFW7j5Us62Xh5mOkQHE1fQus9KpWQB+XhpCSONRVFbJzuxiALrHBBlbjIiIiDQojWpFRETcTKCPJ4mtm5LYumnNuvKqanZmFbPlaFB2bJZZSUU1G/cVsHFfQc22JhO0CvU/GpZZa/qXhTbxNuJyRC7Ypn0F2O2OF12EB/gYXY6IiIg0IAVjIiIigreHhS7NrXRpbq1ZZ7PZSc8rPTqrrKBmhllOUTm7c0rYnVPC1xsP1mwfEeh9UlgWE+KnvmXi9NbrMUoRERG3pWBMRERETslsNhEb6k9sqD9XdGtWsz67qOyEmWWFbD1QyJ5DJWQVlpNVmMPC7Tk12wZ4e9DphL5lcVGBtAsPwMtDfcvEeai/mIiIiPtSMCYiIiLnJDzAh/AOPgzqEF6zrri8im0Hj4Zl+x1/bs8soqi8iuS0PJLT8mq29bSYaBceUPM2zGN9ywJ8PI24HHFzdrv9eDCm/mIiIiJuR8GYiIiIXLAm3h70jA2hZ2xIzbrKahup2cUnvBHT8ThmUVkVW46GaJ+sPX6Mlk39at6GeazZf3ig+j1J/TpQUEZOUTkWs4kuUdYz7yAiIiKNioIxERERqReeFjOdmgXSqVkg1/VwrLPb7ew7fMQRlB0oqHkc82BBGXsPlbL3UCnfbsqsOUZoE286RwXy5rieeFr0+KXUvZT0fAA6Rgbg62UxthgRERFpcOc8wlyyZAkjR44kKioKk8nEF1988bvbf/755wwdOpSwsDACAwPp06cP33///UnbTZ8+ndjYWHx8fEhMTCQ5OflcSxMREREnZzKZiA7x4/IukSQN68Cb43qxcvJlrHt0KB/cnsjkER25unsUbcObYDZBbnE5u3KKFYpJvUnJOAyov5iIiIi7OucZYyUlJcTHx3Pbbbdx7bXXnnH7JUuWMHToUJ599lmCgoJ4++23GTlyJKtWrSIhIQGAOXPmkJSUxIwZM0hMTGTq1KkMHz6c7du3Ex4efoYziIiIiKsL8feif7tQ+rcLrVl3pKKabZmFFBypNLAyaewmXtqOge3DaOrvbXQpIiIiYgCT3W63n/fOJhNz585l1KhR57Rf586dGT16NI899hgAiYmJ9OrVi2nTpgFgs9mIjo5m0qRJPPzww2c8XmFhIVarlYKCAgIDA8/5OkRERMQ9aQzhGnSfRERE5Fyd7fihwZ9LsNlsFBUVERLiaM5bUVHB2rVrGTJkyPGizGaGDBnCypUrT3mM8vJyCgsLay0iIiIiIiIiIiLnosGDseeff57i4mJuvPFGAHJzc6muriYiIqLWdhEREWRmZp7qEEyZMgWr1VqzREdH13vdIiIiIiIiIiLSuDRoMPbRRx/x5JNP8vHHH19Q77DJkydTUFBQs2RkZNRhlSIiIiIiIiIi4g7Oufn++Zo9ezZ33HEHn3zySa3HJkNDQ7FYLGRlZdXaPisri8jIyFMey9vbG29vNUgVEREREREREZHz1yAzxmbNmsX48eOZNWsWV1xxRa2feXl50aNHDxYsWFCzzmazsWDBAvr06dMQ5YmIiIiIiIiIiBs65xljxcXFpKam1nzfs2cPKSkphISEEBMTw+TJk9m/fz/vvfce4Hh8cty4cbz00kskJibW9A3z9fXFarUCkJSUxLhx4+jZsye9e/dm6tSplJSUMH78+Lq4RhERERERERERkZOcczC2Zs0aBg8eXPM9KSkJgHHjxvHOO+9w8OBB0tPTa37++uuvU1VVxYQJE5gwYULN+mPbA4wePZqcnBwee+wxMjMz6d69O/Pnzz+pIb+IiIiIiIiIiEhdMdntdrvRRVyowsJCrFYrBQUFBAYGGl2OiIiIuAiNIVyD7pOIiIicq7MdPzToWylFRERERERERESchYIxERERERERERFxSwrGRERERERERETELSkYExERERERERERt6RgTERERERERERE3JKCMRERERERERERcUsKxkRERERERERExC0pGBMREREREREREbekYExERERERERERNySgjEREREREREREXFLCsZERERERERERMQtKRgTERERERERERG3pGBMRERERERERETckofRBdQFu90OQGFhocGViIiIiCs5NnY4NpYQ56SxnoiIiJyrsx3nNYpgrKioCIDo6GiDKxERERFXVFRUhNVqNboMOQ2N9UREROR8nWmcZ7I3gl+R2mw2Dhw4QEBAACaTqc6PX1hYSHR0NBkZGQQGBtb58aXu6F65Dt0r16F75Rp0n86P3W6nqKiIqKgozGZ1mHBWGusJ6D65Et0r16F75Tp0r87d2Y7zGsWMMbPZTIsWLer9PIGBgfp/QBehe+U6dK9ch+6Va9B9OneaKeb8NNaTE+k+uQ7dK9ehe+U6dK/OzdmM8/SrURERERERERERcUsKxkRERERERERExC0pGDsL3t7ePP7443h7extdipyB7pXr0L1yHbpXrkH3SeT86X8/rkH3yXXoXrkO3SvXoXtVfxpF830REREREREREZFzpRljIiIiIiIiIiLilhSMiYiIiIiIiIiIW1IwJiIiIiIiIiIibknBmIiIiIiIiIiIuCUFY2dh+vTpxMbG4uPjQ2JiIsnJyUaXJL8xZcoUevXqRUBAAOHh4YwaNYrt27cbXZacwb/+9S9MJhP33Xef0aXIKezfv58//elPNG3aFF9fX7p27cqaNWuMLkt+o7q6mkcffZRWrVrh6+tLmzZtePrpp9G7dUTOjsZ5zk/jPNekcZ5z0zjPNWic1zAUjJ3BnDlzSEpK4vHHH2fdunXEx8czfPhwsrOzjS5NTrB48WImTJjAL7/8wo8//khlZSXDhg2jpKTE6NLkNFavXs1rr71Gt27djC5FTuHw4cP069cPT09PvvvuO7Zs2cJ///tfgoODjS5NfuO5557j1VdfZdq0aWzdupXnnnuOf//737z88stGlybi9DTOcw0a57kejfOcm8Z5rkPjvIZhsitq/F2JiYn06tWLadOmAWCz2YiOjmbSpEk8/PDDBlcnp5OTk0N4eDiLFy9m4MCBRpcjv1FcXMxFF13EK6+8wj//+U+6d+/O1KlTjS5LTvDwww+zfPlyli5danQpcgZXXnklERERzJw5s2bdddddh6+vLx988IGBlYk4P43zXJPGec5N4zznp3Ge69A4r2FoxtjvqKioYO3atQwZMqRmndlsZsiQIaxcudLAyuRMCgoKAAgJCTG4EjmVCRMmcMUVV9T635Y4l3nz5tGzZ09uuOEGwsPDSUhI4I033jC6LDmFvn37smDBAnbs2AHAhg0bWLZsGSNGjDC4MhHnpnGe69I4z7lpnOf8NM5zHRrnNQwPowtwZrm5uVRXVxMREVFrfUREBNu2bTOoKjkTm83GfffdR79+/ejSpYvR5chvzJ49m3Xr1rF69WqjS5HfsXv3bl599VWSkpL4+9//zurVq7n33nvx8vJi3LhxRpcnJ3j44YcpLCykY8eOWCwWqqureeaZZxgzZozRpYk4NY3zXJPGec5N4zzXoHGe69A4r2EoGJNGZ8KECfz6668sW7bM6FLkNzIyMvjrX//Kjz/+iI+Pj9HlyO+w2Wz07NmTZ599FoCEhAR+/fVXZsyYoQGTk/n444/58MMP+eijj+jcuTMpKSncd999REVF6V6JSKOjcZ7z0jjPdWic5zo0zmsYCsZ+R2hoKBaLhaysrFrrs7KyiIyMNKgq+T0TJ07k66+/ZsmSJbRo0cLocuQ31q5dS3Z2NhdddFHNuurqapYsWcK0adMoLy/HYrEYWKEc06xZM+Li4mqt69SpE5999plBFcnpPPjggzz88MPcdNNNAHTt2pW9e/cyZcoUDZhEfofGea5H4zznpnGe69A4z3VonNcw1GPsd3h5edGjRw8WLFhQs85ms7FgwQL69OljYGXyW3a7nYkTJzJ37lx+/vlnWrVqZXRJcgqXXXYZmzZtIiUlpWbp2bMnY8aMISUlRYMlJ9KvXz+2b99ea92OHTto2bKlQRXJ6ZSWlmI21/7n3GKxYLPZDKpIxDVonOc6NM5zDRrnuQ6N81yHxnkNQzPGziApKYlx48bRs2dPevfuzdSpUykpKWH8+PFGlyYnmDBhAh999BFffvklAQEBZGZmAmC1WvH19TW4OjkmICDgpH4g/v7+NG3aVH1CnMz9999P3759efbZZ7nxxhtJTk7m9ddf5/XXXze6NPmNkSNH8swzzxATE0Pnzp1Zv349L7zwArfddpvRpYk4PY3zXIPGea5B4zzXoXGe69A4r2GY7Ha73eginN20adP4z3/+Q2ZmJt27d+d///sfiYmJRpclJzCZTKdc//bbb3Prrbc2bDFyTgYNGqTXeDupr7/+msmTJ7Nz505atWpFUlISd955p9FlyW8UFRXx6KOPMnfuXLKzs4mKiuLmm2/msccew8vLy+jyRJyexnnOT+M816VxnvPSOM81aJzXMBSMiYiIiIiIiIiIW1KPMRERERERERERcUsKxkRERERERERExC0pGBMREREREREREbekYExERERERERERNySgjEREREREREREXFLCsZERERERERERMQtKRgTERERERERERG3pGBMRERERERERETckoIxEZGjTCYTX3zxhdFliIiIiEgd0zhPRE5HwZiIOIVbb70Vk8l00nL55ZcbXZqIiIiIXACN80TEmXkYXYCIyDGXX345b7/9dq113t7eBlUjIiIiInVF4zwRcVaaMSYiTsPb25vIyMhaS3BwMOCY/v7qq68yYsQIfH19ad26NZ9++mmt/Tdt2sSll16Kr68vTZs25a677qK4uLjWNm+99RadO3fG29ubZs2aMXHixFo/z83N5ZprrsHPz4927doxb968mp8dPnyYMWPGEBYWhq+vL+3atTtpgCciIiIiJ9M4T0SclYIxEXEZjz76KNdddx0bNmxgzJgx3HTTTWzduhWAkpIShg8fTnBwMKtXr+aTTz7hp59+qjUgevXVV5kwYQJ33XUXmzZtYt68ebRt27bWOZ588kluvPFGNm7cyB/+8AfGjBlDXl5ezfm3bNnCd999x9atW3n11VcJDQ1tuP8DiIiIiDRSGueJiGHsIiJOYNy4cXaLxWL39/evtTzzzDN2u91uB+x33313rX0SExPt99xzj91ut9tff/11e3BwsL24uLjm5998843dbDbbMzMz7Xa73R4VFWX/xz/+cdoaAPsjjzxS8724uNgO2L/77ju73W63jxw50j5+/Pi6uWARERERN6Fxnog4M/UYExGnMXjwYF599dVa60JCQmo+9+nTp9bP+vTpQ0pKCgBbt24lPj4ef3//mp/369cPm83G9u3bMZlMHDhwgMsuu+x3a+jWrVvNZ39/fwIDA8nOzgbgnnvu4brrrmPdunUMGzaMUaNG0bdv3/O6VhERERF3onGeiDgrBWMi4jT8/f1PmvJeV3x9fc9qO09Pz1rfTSYTNpsNgBEjRrB3716+/fZbfvzxRy677DImTJjA888/X+f1ioiIiDQmGueJiLNSjzERcRm//PLLSd87deoEQKdOndiwYQMlJSU1P1++fDlms5kOHToQEBBAbGwsCxYsuKAawsLCGDduHB988AFTp07l9ddfv6DjiYiIiIjGeSJiHM0YExGnUV5eTmZmZq11Hh4eNY1PP/nkE3r27En//v358MMPSU5OZubMmQCMGTOGxx9/nHHjxvHEE0+Qk5PDpEmTGDt2LBEREQA88cQT3H333YSHhzNixAiKiopYvnw5kyZNOqv6HnvsMXr06EHnzp0pLy/n66+/rhmwiYiIiMjpaZwnIs5KwZiIOI358+fTrFmzWus6dOjAtm3bAMebhGbPns1f/vIXmjVrxqxZs4iLiwPAz8+P77//nr/+9a/06tULPz8/rrvuOl544YWaY40bN46ysjJefPFFHnjgAUJDQ7n++uvPuj4vLy8mT55MWloavr6+DBgwgNmzZ9fBlYuIiIg0bhrniYizMtntdrvRRYiInInJZGLu3LmMGjXK6FJEREREpA5pnCciRlKPMRERERERERERcUsKxkRERERERERExC3pUUoREREREREREXFLmjEmIiIiIiIiIiJuScGYiIiIiIiIiIi4JQVjIiIiIiIiIiLilhSMiYiIiIiIiIiIW1IwJiIiIiIiIiIibknBmIiIiIiIiIiIuCUFYyIiIiIiIiIi4pYUjImIiIiIiIiIiFv6f2xteVVRIFgWAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Prediction and Plotting**"
      ],
      "metadata": {
        "id": "jNW_FDG1GuyG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def pred_and_plot_image(\n",
        "    model: torch.nn.Module,\n",
        "    class_names: List[str],\n",
        "    image_path: str,\n",
        "    image_size: Tuple[int, int] = (224, 224),\n",
        "    transform: torchvision.transforms = None,\n",
        "    device: torch.device = device,\n",
        "):\n",
        "\n",
        "    img = Image.open(image_path).convert(\"RGB\")\n",
        "\n",
        "    if transform is not None:\n",
        "        image_transform = transform\n",
        "    else:\n",
        "        image_transform = transforms.Compose(\n",
        "            [\n",
        "                transforms.Resize(image_size),\n",
        "                transforms.ToTensor(),\n",
        "                transforms.Normalize(\n",
        "                    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n",
        "                ),\n",
        "            ]\n",
        "        )\n",
        "    model.to(device)\n",
        "    model.eval()\n",
        "    with torch.inference_mode():\n",
        "        transformed_image = image_transform(img).unsqueeze(dim=0)\n",
        "        target_image_pred = model(transformed_image.to(device))\n",
        "\n",
        "    target_image_pred_probs = torch.softmax(target_image_pred, dim=1)\n",
        "\n",
        "    target_image_pred_label = torch.argmax(target_image_pred_probs, dim=1)\n",
        "\n",
        "    plt.figure()\n",
        "    plt.imshow(img)\n",
        "    plt.title(\n",
        "        f\"Pred: {class_names[target_image_pred_label]} | Prob: {target_image_pred_probs.max():.2f}\"\n",
        "    )\n",
        "    plt.axis(False)"
      ],
      "metadata": {
        "trusted": true,
        "id": "ABzmf3O_GuyG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# image_path = \"/content/gdrive/MyDrive/Colab Notebooks/capstone-dataset/test/angry/1024.jpg\"\n",
        "image_path = \"/content/gdrive/MyDrive/Colab Notebooks/capstone-dataset/test/surprise/10185.jpg\"\n",
        "# image_path = \"/content/gdrive/MyDrive/Colab Notebooks/capstone-dataset/test/fear/10044.jpg\"\n",
        "\n",
        "\n",
        "pred_and_plot_image(model=train_vit,\n",
        "                    image_path= image_path,\n",
        "                    class_names=class_names)"
      ],
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "YyDZ0-vdGuyG",
        "outputId": "22b422ab-b9e6-4e25-fc55-2bdd6c1cb4c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAukElEQVR4nO3de3RV9Zn/8ScjkOScBHIlCQECJUARLxQp1iUDeMMRRu2yLLWdtoBUGaeMtq5RW9esVlsZ52JbXDitMtNip61VgV5mTb0No3ZZnaXlog7gBRCpckmAEEICCbf9+6OL7+JI9vM58k0Gf877tZZ/eJ7z3Xufvb8nDzt5nu8uSJIkMQAAzOxPTvUBAAA+PEgKAICApAAACEgKAICApAAACEgKAICApAAACEgKAICApAAACEgKHyHDhg2z2bNnn+rD+F8xdepUmzp16v/qPp977jkrKCiw5557Tr532LBhduedd/b6MeXrnXfesYKCArv33ntP9aHgQ46k0EMeeughKygoCP8VFRXZqFGjbP78+dbU1HSqDw8fUnfeeWfOvMlkMnb66afb3/7t31pbW9upPry8tLa22g033GDV1dWWzWbtggsusNWrV+c9/v7777cxY8ZYYWGh1dfX2y233GIdHR0nvG/jxo02c+ZMKy8vt0wmY5MmTbJnn322Jz8KzKzPqT6Aj5pvfetbNnz4cOvs7LTf/e539oMf/MAef/xxW7t2rWUymVN9eB8ZTz/99Kk+hB71gx/8wEpKSqy9vd2efvppW7BggT3zzDP2wgsvWEFBwak+vFRHjx61GTNm2Kuvvmq33nqrVVVV2fe//32bOnWqrVq1ykaOHOmOv/322+0f//EfbebMmXbzzTfb+vXrbdGiRbZu3Tp76qmnwvveffddO++88+y0006zW2+91bLZrC1ZssSmTZtm//Vf/2WTJ0/u7Y/6f0eCHrFkyZLEzJLf//73Oa/fcsstiZklDz/8cOrY9vb2HjmGhoaGZNasWT2yrZ526NChpKurK3o7HR0dPXA0J+fZZ59NzCx59tln5XsbGhqSb37zm/J93/zmNxMzS3bu3Jnz+lVXXZWYWfLiiy+mjv0g52Lz5s2JmSX/9E//lPeYfDz66KOJmSVLly4NrzU3NydlZWXJZz/7WXfstm3bkj59+iRf+MIXcl5ftGhRYmbJv//7v4fX/uqv/irp06dP8sYbb4TXOjo6kiFDhiTjx4/voU+DJEkSfn3Uyy688EIzM9u8ebOZmc2ePdtKSkps06ZNNn36dCstLbW/+Iu/MLM//qtr4cKFNnbsWCsqKrKamhqbN2+e7dmzJ2ebSZLY3XffbYMHD7ZMJmMXXHCBrVu3rtv9b9q0yTZt2iSP89ChQ3bXXXfZyJEjraioyCorK23SpEn2n//5n+E9ab/Hnz17tg0bNiz8//G/v164cKGNGDHCCgsLbf369eH38o8++qjdcccdVltba9ls1q644gp79913c7Y7depUO+OMM2zVqlU2efJky2Qydscdd6Qey6JFi2zs2LGWyWSsvLzcJkyYYA8//HDOe7Zu3WrXXXed1dTUWGFhoY0dO9Z+9KMfnfCZ3nvvPfv0pz9t2WzWBg4caF/96letq6tLnsee8v55452L5uZmmzt3rtXU1FhRUZGdffbZ9uMf/zh129/73vesoaHBiouLbcqUKbZ27dqc+KFDh+yNN96w7du3y+NctmyZ1dTU2FVXXRVeq66utquvvtp+/etfu+fsv//7v+3w4cN27bXX5rx+7P8feeSR8Nrzzz9vn/jEJ2z06NHhtUwmY1dccYWtXr3aNmzYII8V+eHXR73s2A/kysrK8Nrhw4ft0ksvtUmTJtm9994bfq00b948e+ihh2zOnDl200032ebNm+3++++3NWvW2AsvvGB9+/Y1M7NvfOMbdvfdd9v06dNt+vTptnr1aps2bZodPHjwhP1fdNFFZvbHH9SeO++80+655x770pe+ZBMnTrS2tjZbuXKlrV692i655JKT+uxLliyxzs5Ou+GGG6ywsNAqKiqstbXVzMwWLFhgBQUFdvvtt1tzc7MtXLjQLr74YnvllVesuLg4bGP37t122WWX2bXXXmuf//znraamptt9/cu//IvddNNN4dcQnZ2d9tprr9lLL71kn/vc58zMrKmpyT71qU9ZQUGBzZ8/36qrq+2JJ56wuXPnWltbm33lK18xM7MDBw7YRRddZH/4wx/spptuskGDBtlPfvITe+aZZ07qPJyM7uZNd+fiwIEDNnXqVNu4caPNnz/fhg8fbkuXLrXZs2dba2ur3XzzzTnb/bd/+zfbt2+fffnLX7bOzk6777777MILL7T/+Z//Ced269atNmbMGJs1a5Y99NBD7nGuWbPGxo8fb3/yJ7n/vpw4caItXrzY3nrrLTvzzDO7HXssYRx/vc0sfB9WrVqV897y8vITtnH8e9WvqpCnU32r8lFx7NdHK1asSHbu3Jm8++67ySOPPJJUVlYmxcXFyXvvvZckSZLMmjUrMbPka1/7Ws74559/PjGz5Gc/+1nO608++WTO683NzUm/fv2SGTNmJEePHg3vu+OOOxIzO+HXRw0NDUlDQ4M8/rPPPjuZMWOG+54pU6YkU6ZMOeH1WbNm5ezj2K8q+vfvnzQ3N+e899ivYOrr65O2trbw+mOPPZaYWXLffffl7M/MkgceeEAey5VXXpmMHTvWPf65c+cmdXV1ya5du3Jev/baa5MBAwYk+/fvT5IkSRYuXJiYWfLYY4+F93R0dCSNjY299uujN998M9m5c2eyefPm5MEHH0wKCwuTmpqa8CuitHNx7Fh/+tOfhtcOHjyYnHfeeUlJSUk4x8euyfFzMUmS5KWXXkrMLPnqV78aXjv23nx+FZnNZpPrrrvuhNd/85vfJGaWPPnkk6ljV61alZhZ8u1vfzvn9WNzvqSkJLx2+eWXJ2VlZTlzJkmS5LzzzkvMLLn33nvlsSI//Pqoh1188cVWXV1tQ4YMsWuvvdZKSkrsl7/8pdXX1+e878Ybb8z5/6VLl9qAAQPskksusV27doX/zjnnHCspKQlVFitWrLCDBw/aX//1X+f8AfLYv3Lf75133pF3CWZmZWVltm7duh69Df/MZz5j1dXV3ca++MUvWmlpafj/mTNnWl1dnT3++OM57yssLLQ5c+bIfZWVldl7771nv//977uNJ0liy5cvt8svv9ySJMk5x5deeqnt3bs3VMw8/vjjVldXZzNnzgzjM5mM3XDDDfI4Ttbo0aOturrahg8fbvPmzbPGxkb7zW9+k1Oc0N25ePzxx622ttY++9nPhtf69u1rN910k7W3t9tvf/vbnPd/+tOfzpmLEydOtHPPPTfnvA8bNsySJJF3CWZ/vKsqLCw84fWioqIQTzN+/Hg799xz7R/+4R9syZIl9s4779gTTzxh8+bNs759++aMvfHGG621tdWuueYaW7Nmjb311lv2la98xVauXCn3gw+GXx/1sH/+53+2UaNGWZ8+faympsZGjx59wq11nz59bPDgwTmvbdiwwfbu3WsDBw7sdrvNzc1mZrZlyxYzsxNulaurq7u9vc7Xt771Lbvyyitt1KhRdsYZZ9if/dmf2Re+8AU766yzTnqbw4cPT429//gLCgqssbHxhARWX19v/fr1k/u6/fbbbcWKFTZx4kRrbGy0adOm2ec+9zk7//zzzcxs586d1traaosXL7bFixd3u43jz3FjY+MJVT/H/z67py1fvtz69+9vffv2tcGDB9uIESNOeE9352LLli02cuTIE+bYmDFjQvx43f2KZdSoUfbYY4+d1HEXFxd3+3eDzs7OEPcsX77crrnmGrvuuuvMzOy0006zW265xX7729/am2++Gd532WWX2aJFi+xrX/uajR8/3szMGhsbbcGCBXbbbbdZSUnJSR0/TkRS6GETJ060CRMmuO8pLCw84Ut89OhRGzhwoP3sZz/rdkzav7h7yuTJk23Tpk3261//2p5++mn713/9V/ve975nDzzwgH3pS18ysz/+4E66eXrrkSNHut2m+oGQj3y3MWbMGHvzzTftP/7jP+zJJ5+05cuX2/e//337xje+YXfddZcdPXrUzMw+//nP26xZs7rdRkwCjDV58mSrqqpy39MT57On1dXVdfsH6WOvDRo0yB1fX19vv/vd72zDhg22Y8cOGzlypNXW1tqgQYNs1KhROe+dP3++zZkzx1577TXr16+fjRs3zn74wx+amZ3wXpw8ksKHxIgRI2zFihV2/vnnu1/+hoYGM/vjncXHPvax8PrOnTtPqFL6oCoqKmzOnDk2Z84ca29vt8mTJ9udd94ZkkJ5ebm9/fbbJ4x7/79G8/H+X1MlSWIbN26M+sGczWbtmmuusWuuucYOHjxoV111lS1YsMC+/vWvW3V1tZWWltqRI0fs4osvdrfT0NBga9eutSRJcu4Wjv+X64dFQ0ODvfbaa3b06NGcf2i88cYbIX687n49+NZbb+VUj30Q48aNs+eff/6E/b/00kuWyWTy/mE9cuTIcBezfv162759e7fd+dls1s4777zw/ytWrLDi4uJwR4h4/E3hQ+Lqq6+2I0eO2Le//e0TYocPHw5VOxdffLH17dvXFi1alPOv9oULF3a73XxLUnfv3p3z/yUlJdbY2Jjzq4ERI0bYG2+8YTt37gyvvfrqq/bCCy/I7b/fsSqYY5YtW2bbt2+3yy677ANvy+zE4+/Xr5+dfvrpliSJHTp0yE477TT7zGc+Y8uXLz+hBNPMcj7T9OnTbdu2bbZs2bLw2v79+1N/7XQqTZ8+3Xbs2GGPPvpoeO3w4cO2aNEiKykpsSlTpuS8/1e/+pVt3bo1/P/LL79sL730Us55/yAlqTNnzrSmpib7xS9+EV7btWuXLV261C6//PKcvzfkMxePHj1qt912m2UyGfvLv/xL970vvvii/eIXv7C5c+fagAED5LEiP9wpfEhMmTLF5s2bZ/fcc4+98sorNm3aNOvbt69t2LDBli5davfdd5/NnDnTqqur7W/+5m/snnvusT//8z+36dOn25o1a+yJJ57o9tcP+Zaknn766TZ16lQ755xzrKKiwlauXGnLli2z+fPnh/dcd9119t3vftcuvfRSmzt3rjU3N9sDDzxgY8eO/cBLMlRUVNikSZNszpw51tTUZAsXLrTGxka7/vrrP9B2jpk2bZrV1tba+eefbzU1Nfb666/b/fffbzNmzAh/0P77v/97e/bZZ+3cc8+166+/3k4//XRraWmx1atX24oVK6ylpcXMzK6//nq7//777Ytf/KKtWrXK6urq7Cc/+cmHsiP9hhtusAcffNBmz55tq1atsmHDhtmyZcvshRdesIULF+b8Md/sj7+HnzRpkt14443W1dVlCxcutMrKSrvtttvCez5ISerMmTPtU5/6lM2ZM8fWr18fOpqPHDlid911V857u5uLx8qHx40bZ4cOHbKHH37YXn75Zfvxj39sQ4cODe/bsmWLXX311XbFFVdYbW2trVu3zh544AE766yz7O/+7u9O8uyhW6eu8OmjJa2j+f1mzZqVZLPZ1PjixYuTc845JykuLk5KS0uTM888M7ntttuSbdu2hfccOXIkueuuu5K6urqkuLg4mTp1arJ27dpuO5rzLUm9++67k4kTJyZlZWVJcXFx8vGPfzxZsGBBcvDgwZz3/fSnP00+9rGPJf369UvGjRuXPPXUU6klqd11zx4rSf35z3+efP3rX08GDhyYFBcXJzNmzEi2bNmS894pU6aklpm+vyT1wQcfTCZPnpxUVlYmhYWFyYgRI5Jbb7012bt3b864pqam5Mtf/nIyZMiQpG/fvkltbW1y0UUXJYsXL85535YtW5IrrrgiyWQySVVVVXLzzTeHUsn/jY7m7j5v2rloampK5syZk1RVVSX9+vVLzjzzzGTJkiU57zn+mnznO99JhgwZkhQWFiZ/+qd/mrz66qvdvjff7viW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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}